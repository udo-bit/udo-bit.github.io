import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-CNa1Rd_2.js";const t={},n=a(`<h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h2><ol><li>了解什么是git hooks</li><li>配置husky+lint-staged完成代码提交规范检查</li></ol><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>当一个团队在维护同一个项目的过程中，一般我们都采用git来进行代码托管，便于多人协同工作。那么这样同样会出现在代码提交的时候，代码规范不一致的问题，所以我们需要控制在代码提交的时候，保证大家的代码规范都是统一的。 那么这节课，配合我们上节课学习的代码规范工具，通过husky的调用git hooks钩子来实现代码提交前的代码规范校验。</p><h2 id="什么是git-hooks-钩子" tabindex="-1"><a class="header-anchor" href="#什么是git-hooks-钩子"><span>什么是git hooks 钩子</span></a></h2><p>git hooks是一些自定义的脚本，用于控制git工作的流程。 默认我们初始化完成一个项目的时候, 会在.git目录下生成hooks的文件夹，里面默认会有一些demo，我们可以直接在这里写脚本，然后在提交代码的各个阶段执行我们的钩子，来实现我们想要的功能。 直接使用.git/hooks的缺陷是，默认情况下，在.git/hooks目录下的hooks钩子无法被提交，就不能将钩子共享到团队项目中。所以我们需要通过husky来实现，git钩子的调用。</p><h2 id="husky" tabindex="-1"><a class="header-anchor" href="#husky"><span>husky</span></a></h2><p>husky可以将git内置的钩子暴露出来，那么我们就可以解决，在git hooks中导致的无法提交钩子的问题。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pnpm add husky </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">D</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>在package.json的scripts中配置如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;prepare&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;husky install&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，我们pnpm i初始化一下我们的工程。 初始化完成后会自动生成一个.husky的目录，接下来我们来配置一下在提交信息之前先去检查我们的代码。如果检查通过允许提交，如果检查不通过，我们不允许提交代码。 通过如下命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> husky</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .husky/pre-commit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;pnpm run lint&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们配置一下lint的命令在项目中：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;lint&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;eslint --ext .ts,.tsx,.vue,.js,.jsx src&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一下，我们在项目中写一个debugger，来测试一些命令: <img src="https://cdn.nlark.com/yuque/0/2022/png/10377041/1667705889271-94be6898-ce88-4be8-9c02-47e42e2a0260.png#clientId=u282e1b80-4bba-4&amp;from=paste&amp;height=47&amp;id=ub14a0c9c&amp;name=image.png&amp;originHeight=47&amp;originWidth=773&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15476&amp;status=done&amp;style=none&amp;taskId=ub585110d-d490-4356-9c36-c4b098571f3&amp;title=&amp;width=773" alt="image.png" loading="lazy"> 提示我们不能存在debugger 像一些警告我们想默认修复他，那么我们可以直接在命令的后面加一个--fix就可以自动修复一些警告例如： <img src="https://cdn.nlark.com/yuque/0/2022/png/10377041/1667705965169-84695a83-01b9-4b59-82f3-6d57c76a8f00.png#clientId=u282e1b80-4bba-4&amp;from=paste&amp;height=165&amp;id=u9570cd66&amp;name=image.png&amp;originHeight=165&amp;originWidth=962&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57618&amp;status=done&amp;style=none&amp;taskId=u12f24c42-9c4b-43d9-ad9e-d82677a403c&amp;title=&amp;width=962" alt="image.png" loading="lazy"> 这些警告我们可以让eslint帮助我们按照我们定义的规范自动修复。</p><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题"><span>存在的问题</span></a></h3><p>我们每次没必要把所有的文件都检查一遍，我们只需要检查我们提交改动的代码即可，所以这种情况下我们需要配合lint-staged使用。他的作用相当于一个文件过滤器，每次提交时只检查本次提交的暂存区的文件，但是他不能校验我们的代码。所以我们可以配合着husky lint-staged和我们的eslint一起使用。 我们先安装一下lint-staged</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lint-staged</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后我们在package.json中配置如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;lint-staged&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;*.{js,tsx,vue,ts,jsx}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;eslint --fix&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调整husky的执行命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dirname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># pnpm run lint 改为</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lint-staged</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试提交代码 <img src="https://cdn.nlark.com/yuque/0/2022/png/10377041/1667706672223-e4405209-de6c-4ad1-b820-74d72d26f932.png#clientId=u282e1b80-4bba-4&amp;from=paste&amp;height=206&amp;id=ua60f0a04&amp;name=image.png&amp;originHeight=206&amp;originWidth=493&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36426&amp;status=done&amp;style=none&amp;taskId=u73f457ee-4242-4897-9e47-2ecd91b7fe3&amp;title=&amp;width=493" alt="image.png" loading="lazy"> 配置完成</p>`,26),l=[n];function h(p,d){return e(),s("div",null,l)}const k=i(t,[["render",h],["__file","04-配置husky.html.vue"]]),g=JSON.parse('{"path":"/demo/front/vue/note/vite_ts/04-%E9%85%8D%E7%BD%AEhusky.html","title":"04-配置husky","lang":"en-US","frontmatter":{"title":"04-配置husky","order":4,"description":"目标 了解什么是git hooks 配置husky+lint-staged完成代码提交规范检查 背景 当一个团队在维护同一个项目的过程中，一般我们都采用git来进行代码托管，便于多人协同工作。那么这样同样会出现在代码提交的时候，代码规范不一致的问题，所以我们需要控制在代码提交的时候，保证大家的代码规范都是统一的。 那么这节课，配合我们上节课学习的代码规...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/demo/front/vue/note/vite_ts/04-%E9%85%8D%E7%BD%AEhusky.html"}],["meta",{"property":"og:site_name","content":"Utopia"}],["meta",{"property":"og:title","content":"04-配置husky"}],["meta",{"property":"og:description","content":"目标 了解什么是git hooks 配置husky+lint-staged完成代码提交规范检查 背景 当一个团队在维护同一个项目的过程中，一般我们都采用git来进行代码托管，便于多人协同工作。那么这样同样会出现在代码提交的时候，代码规范不一致的问题，所以我们需要控制在代码提交的时候，保证大家的代码规范都是统一的。 那么这节课，配合我们上节课学习的代码规..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2022/png/10377041/1667705889271-94be6898-ce88-4be8-9c02-47e42e2a0260.png#clientId=u282e1b80-4bba-4&from=paste&height=47&id=ub14a0c9c&name=image.png&originHeight=47&originWidth=773&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15476&status=done&style=none&taskId=ub585110d-d490-4356-9c36-c4b098571f3&title=&width=773"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-19T02:04:14.000Z"}],["meta",{"property":"article:author","content":"GXL"}],["meta",{"property":"article:modified_time","content":"2024-08-19T02:04:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04-配置husky\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2022/png/10377041/1667705889271-94be6898-ce88-4be8-9c02-47e42e2a0260.png#clientId=u282e1b80-4bba-4&from=paste&height=47&id=ub14a0c9c&name=image.png&originHeight=47&originWidth=773&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15476&status=done&style=none&taskId=ub585110d-d490-4356-9c36-c4b098571f3&title=&width=773\\",\\"https://cdn.nlark.com/yuque/0/2022/png/10377041/1667705965169-84695a83-01b9-4b59-82f3-6d57c76a8f00.png#clientId=u282e1b80-4bba-4&from=paste&height=165&id=u9570cd66&name=image.png&originHeight=165&originWidth=962&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57618&status=done&style=none&taskId=u12f24c42-9c4b-43d9-ad9e-d82677a403c&title=&width=962\\",\\"https://cdn.nlark.com/yuque/0/2022/png/10377041/1667706672223-e4405209-de6c-4ad1-b820-74d72d26f932.png#clientId=u282e1b80-4bba-4&from=paste&height=206&id=ua60f0a04&name=image.png&originHeight=206&originWidth=493&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36426&status=done&style=none&taskId=u73f457ee-4242-4897-9e47-2ecd91b7fe3&title=&width=493\\"],\\"dateModified\\":\\"2024-08-19T02:04:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GXL\\",\\"url\\":\\"https://www.cnblogs.com/feel-myself\\",\\"email\\":\\"gaoxiaoliang123@126.com\\"}]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"什么是git hooks 钩子","slug":"什么是git-hooks-钩子","link":"#什么是git-hooks-钩子","children":[]},{"level":2,"title":"husky","slug":"husky","link":"#husky","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"存在的问题","slug":"存在的问题","link":"#存在的问题","children":[]}]}],"git":{"createdTime":1724033054000,"updatedTime":1724033054000,"contributors":[{"name":"udo-bit","email":"enote_gxl@163.com","commits":1}]},"readingTime":{"minutes":3.25,"words":974},"filePathRelative":"demo/front/vue/note/vite+ts/04-配置husky.md","localizedDate":"August 19, 2024","excerpt":"<h2>目标</h2>\\n<ol>\\n<li>了解什么是git hooks</li>\\n<li>配置husky+lint-staged完成代码提交规范检查</li>\\n</ol>\\n<h2>背景</h2>\\n<p>当一个团队在维护同一个项目的过程中，一般我们都采用git来进行代码托管，便于多人协同工作。那么这样同样会出现在代码提交的时候，代码规范不一致的问题，所以我们需要控制在代码提交的时候，保证大家的代码规范都是统一的。\\n那么这节课，配合我们上节课学习的代码规范工具，通过husky的调用git hooks钩子来实现代码提交前的代码规范校验。</p>\\n<h2>什么是git hooks 钩子</h2>\\n<p>git hooks是一些自定义的脚本，用于控制git工作的流程。\\n默认我们初始化完成一个项目的时候, 会在.git目录下生成hooks的文件夹，里面默认会有一些demo，我们可以直接在这里写脚本，然后在提交代码的各个阶段执行我们的钩子，来实现我们想要的功能。\\n直接使用.git/hooks的缺陷是，默认情况下，在.git/hooks目录下的hooks钩子无法被提交，就不能将钩子共享到团队项目中。所以我们需要通过husky来实现，git钩子的调用。</p>","autoDesc":true}');export{k as comp,g as data};
