import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,d as n}from"./app-DYI7tQGT.js";const l="/assets/image-20210713202807818-Db2F-n2n.png",t="/assets/image-20210713203124797-tTY61ds-.png",r="/assets/image-20210713203753373-V9Uog_fi.png",p="/assets/image-20210713204155887-DeZhkWb-.png",h="/assets/image-20210713205003790-CNyOtgo_.png",d="/assets/image-20210713210800950-C9-3kWoL.png",g="/assets/image-20210713211009593-Qoi27VH7.png",k="/assets/image-20210713211417049-BVyyZpqj.png",c="/assets/image-20210713211550169-ClNwJMub.png",o="/assets/image-20210713211657319-5gw_It-i.png",u="/assets/image-20210713211814094-BvogtQn0.png",m="/assets/image-20210713212656887-RGQImEaR.png",v="/assets/image-20210713212349272-Dy-lOly-.png",y="/assets/image-20210713212336185-DcclICTY.png",A="/assets/image-20210713212513324-DZpMfZqI.png",B="/assets/image-20210713220736408-DJVWMiIo.png",b="/assets/image-20210713212749575-CZMV1RKk.png",f="/assets/image-20210713212901725-9tqT7xga.png",_="/assets/image-20210713213146089-CEHyvZQf.png",F="/assets/image-20210713213213075-DhV1rv3c.png",E="/assets/image-20210713213312278-BJWflBIC.png",C="/assets/image-20210713213959569-BRMk4I9K.png",x="/assets/image-20210713214404481-Ctv4pYm_.png",D="/assets/image-20210713214925388-BPFB8-RI.png",S="/assets/image-20210713220104956-Id9aj8Wb.png",z="/assets/image-20210713220509769-DfLnP0Sz.png",R="/assets/image-20210713220605881-vExoL8Mn.png",I="/assets/image-20210713220857396-CgGe0P79.png",N="/assets/image-20210713221339022-DoC2B5T3.png",q="/assets/image-20210713222157190-D7k64yc3.png",T="/assets/image-20210713222656562-C8a8EATA.png",Z="/assets/image-20210713222757702-BYNTPgnB.png",L="/assets/image-20210713222841951-B3JjeT-4.png",w="/assets/image-20210713223041491-BTHCc1iL.png",O="/assets/image-20210713223150650-B1UO-5Ft.png",j="/assets/image-20210713224049419-DMEhUy26.png",J="/assets/image-20210713224245731-CGVWbrw3.png",P="/assets/image-20210713224517686-XTBAZrpq.png",U="/assets/1525620483637-D1Zo88aQ.png",M="/assets/1525620787090-Cep3X9ie.png",i="/assets/1525620835911-D62_yU79.png",V="/assets/1544361421671-KwEC3JjF.png",H="/assets/1525622652849-DYtSsEax.png",W="/assets/1525622699666-DWVxBgPT.png",Q="/assets/1525622754316-Cj-nB18Z.png",G="/assets/image-20210713224724673-BZtJN9ZA.png",Y="/assets/image-20210713225653000-dDqjpq9b.png",K="/assets/image-20210713230444308-Bu_xI9a3.png",X="/assets/image-20210713231439607-CqQVmFmy.png",$="/assets/image-20210713232522531-DIxWh-Og.png",ii="/assets/image-20210713232658928-BStR9_j0.png",si="/assets/image-20210713232916215-DkdZ0QP8.png",ai="/assets/image-20210713233528982-94wOn6h1.png",ei="/assets/image-20210713233727923-CCy4TsUT.png",ni="/assets/image-20210713235133225-CC8C_s11.png",li="/assets/image-20210713235235219-CSMPrmu5.png",ti="/assets/image-20210714000101516-DOCB2N7n.png",ri="/assets/image-20210714000414781-BDVNAfu9.png",pi="/assets/image-20210714000440143-B3P6SOpd.png",hi="/assets/image-20210714000505928-Dc2Dqexk.png",di="/assets/image-20210714000522913-CZC4aYz-.png",gi="/assets/image-20210714000830703-ZcaBBzvT.png",ki="/assets/image-20210714000837140-BpedEWbG.png",ci="/assets/image-20210714000941256-BL40SNw8.png",oi="/assets/image-20210714001728017-Cdc119E9.png",ui={},mi=n('<h1 id="springcloud01" tabindex="-1"><a class="header-anchor" href="#springcloud01"><span>SpringCloud01</span></a></h1><h1 id="_1-认识微服务" tabindex="-1"><a class="header-anchor" href="#_1-认识微服务"><span>1.认识微服务</span></a></h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h2 id="_1-0-学习目标" tabindex="-1"><a class="header-anchor" href="#_1-0-学习目标"><span>1.0.学习目标</span></a></h2><p>了解微服务架构的优缺点</p><h2 id="_1-1-单体架构" tabindex="-1"><a class="header-anchor" href="#_1-1-单体架构"><span>1.1.单体架构</span></a></h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><figure><img src="'+l+'" alt="image-20210713202807818" tabindex="0" loading="lazy"><figcaption>image-20210713202807818</figcaption></figure><p>单体架构的优缺点如下：</p><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="_1-2-分布式架构" tabindex="-1"><a class="header-anchor" href="#_1-2-分布式架构"><span>1.2.分布式架构</span></a></h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><figure><img src="'+t+'" alt="image-20210713203124797" tabindex="0" loading="lazy"><figcaption>image-20210713203124797</figcaption></figure><p>分布式架构的优缺点：</p><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h2 id="_1-3-微服务" tabindex="-1"><a class="header-anchor" href="#_1-3-微服务"><span>1.3.微服务</span></a></h2><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><figure><img src="'+r+'" alt="image-20210713203753373" tabindex="0" loading="lazy"><figcaption>image-20210713203753373</figcaption></figure><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p><p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p><h2 id="_1-4-springcloud" tabindex="-1"><a class="header-anchor" href="#_1-4-springcloud"><span>1.4.SpringCloud</span></a></h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：https://spring.io/projects/spring-cloud。</p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><figure><img src="'+p+'" alt="image-20210713204155887" tabindex="0" loading="lazy"><figcaption>image-20210713204155887</figcaption></figure><p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p><figure><img src="'+h+'" alt="image-20210713205003790" tabindex="0" loading="lazy"><figcaption>image-20210713205003790</figcaption></figure><p>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p><h2 id="_1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-5-总结"><span>1.5.总结</span></a></h2><ul><li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p></li><li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务：一种良好的分布式架构方案</p><p>①优点：拆分粒度更小、服务更独立、耦合度更低</p><p>②缺点：架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h1 id="_2-服务拆分和远程调用" tabindex="-1"><a class="header-anchor" href="#_2-服务拆分和远程调用"><span>2.服务拆分和远程调用</span></a></h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="_2-1-服务拆分原则" tabindex="-1"><a class="header-anchor" href="#_2-1-服务拆分原则"><span>2.1.服务拆分原则</span></a></h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><figure><img src="'+d+'" alt="image-20210713210800950" tabindex="0" loading="lazy"><figcaption>image-20210713210800950</figcaption></figure><h2 id="_2-2-服务拆分示例" tabindex="-1"><a class="header-anchor" href="#_2-2-服务拆分示例"><span>2.2.服务拆分示例</span></a></h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p><figure><img src="'+g+'" alt="image-20210713211009593" tabindex="0" loading="lazy"><figcaption>image-20210713211009593</figcaption></figure><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h3 id="_2-2-1-导入sql语句" tabindex="-1"><a class="header-anchor" href="#_2-2-1-导入sql语句"><span>2.2.1.导入Sql语句</span></a></h3><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><figure><img src="'+k+'" alt="image-20210713211417049" tabindex="0" loading="lazy"><figcaption>image-20210713211417049</figcaption></figure><p>cloud-user表中初始数据如下：</p><figure><img src="'+c+'" alt="image-20210713211550169" tabindex="0" loading="lazy"><figcaption>image-20210713211550169</figcaption></figure><p>cloud-order表中初始数据如下：</p><figure><img src="'+o+'" alt="image-20210713211657319" tabindex="0" loading="lazy"><figcaption>image-20210713211657319</figcaption></figure><p>cloud-order表中持有cloud-user表中的id字段。</p><h3 id="_2-2-2-导入demo工程" tabindex="-1"><a class="header-anchor" href="#_2-2-2-导入demo工程"><span>2.2.2.导入demo工程</span></a></h3><p>用IDEA导入课前资料提供的Demo：</p><figure><img src="'+u+'" alt="image-20210713211814094" tabindex="0" loading="lazy"><figcaption>image-20210713211814094</figcaption></figure><p>项目结构如下：</p><figure><img src="'+m+'" alt="image-20210713212656887" tabindex="0" loading="lazy"><figcaption>image-20210713212656887</figcaption></figure><p>导入后，会在IDEA右下角出现弹窗：</p><figure><img src="'+v+'" alt="image-20210713212349272" tabindex="0" loading="lazy"><figcaption>image-20210713212349272</figcaption></figure><p>点击弹窗，然后按下图选择：</p><figure><img src="'+y+'" alt="image-20210713212336185" tabindex="0" loading="lazy"><figcaption>image-20210713212336185</figcaption></figure><p>会出现这样的菜单：</p><figure><img src="'+A+'" alt="image-20210713212513324" tabindex="0" loading="lazy"><figcaption>image-20210713212513324</figcaption></figure><p>配置下项目使用的JDK：</p><figure><img src="'+B+'" alt="image-20210713220736408" tabindex="0" loading="lazy"><figcaption>image-20210713220736408</figcaption></figure><h2 id="_2-3-实现远程调用案例" tabindex="-1"><a class="header-anchor" href="#_2-3-实现远程调用案例"><span>2.3.实现远程调用案例</span></a></h2><p>在order-service服务中，有一个根据id查询订单的接口：</p><figure><img src="'+b+'" alt="image-20210713212749575" tabindex="0" loading="lazy"><figcaption>image-20210713212749575</figcaption></figure><p>根据id查询订单，返回值是Order对象，如图：</p><figure><img src="'+f+'" alt="image-20210713212901725" tabindex="0" loading="lazy"><figcaption>image-20210713212901725</figcaption></figure><p>其中的user为null</p><p>在user-service中有一个根据id查询用户的接口：</p><figure><img src="'+_+'" alt="image-20210713213146089" tabindex="0" loading="lazy"><figcaption>image-20210713213146089</figcaption></figure><p>查询的结果如图：</p><figure><img src="'+F+'" alt="image-20210713213213075" tabindex="0" loading="lazy"><figcaption>image-20210713213213075</figcaption></figure><h3 id="_2-3-1-案例需求" tabindex="-1"><a class="header-anchor" href="#_2-3-1-案例需求"><span>2.3.1.案例需求：</span></a></h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p><figure><img src="'+E+`" alt="image-20210713213312278" tabindex="0" loading="lazy"><figcaption>image-20210713213312278</figcaption></figure><p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用http://localhost:8081/user/{userId}这个接口。</p><p>大概的步骤是这样的：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul><h3 id="_2-3-2-注册resttemplate" tabindex="-1"><a class="header-anchor" href="#_2-3-2-注册resttemplate"><span>2.3.2.注册RestTemplate</span></a></h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> cn.itcast.order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.mybatis.spring.annotation.MapperScan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.context.annotation.Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.web.client.RestTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">MapperScan</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cn.itcast.order.mapper&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">OrderApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RestTemplate</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RestTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-3-实现远程调用" tabindex="-1"><a class="header-anchor" href="#_2-3-3-实现远程调用"><span>2.3.3.实现远程调用</span></a></h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><figure><img src="`+C+'" alt="image-20210713213959569" tabindex="0" loading="lazy"><figcaption>image-20210713213959569</figcaption></figure><h2 id="_2-4-提供者与消费者" tabindex="-1"><a class="header-anchor" href="#_2-4-提供者与消费者"><span>2.4.提供者与消费者</span></a></h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><figure><img src="'+x+'" alt="image-20210713214404481" tabindex="0" loading="lazy"><figcaption>image-20210713214404481</figcaption></figure><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p><h1 id="_3-eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_3-eureka注册中心"><span>3.Eureka注册中心</span></a></h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><figure><img src="'+D+'" alt="image-20210713214925388" tabindex="0" loading="lazy"><figcaption>image-20210713214925388</figcaption></figure><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ul><h2 id="_3-1-eureka的结构和作用" tabindex="-1"><a class="header-anchor" href="#_3-1-eureka的结构和作用"><span>3.1.Eureka的结构和作用</span></a></h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><figure><img src="'+S+'" alt="image-20210713220104956" tabindex="0" loading="lazy"><figcaption>image-20210713220104956</figcaption></figure><p>回答之前的各个问题。</p><p>问题1：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li></ul><p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><figure><img src="'+z+'" alt="image-20210713220509769" tabindex="0" loading="lazy"><figcaption>image-20210713220509769</figcaption></figure><h2 id="_3-2-搭建eureka-server" tabindex="-1"><a class="header-anchor" href="#_3-2-搭建eureka-server"><span>3.2.搭建eureka-server</span></a></h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="_3-2-1-创建eureka-server服务" tabindex="-1"><a class="header-anchor" href="#_3-2-1-创建eureka-server服务"><span>3.2.1.创建eureka-server服务</span></a></h3><p>在cloud-demo父工程下，创建一个子模块：</p><figure><img src="'+R+'" alt="image-20210713220605881" tabindex="0" loading="lazy"><figcaption>image-20210713220605881</figcaption></figure><p>填写模块信息：</p><figure><img src="'+I+'" alt="image-20210713220857396" tabindex="0" loading="lazy"><figcaption>image-20210713220857396</figcaption></figure><p>然后填写服务信息：</p><figure><img src="'+N+`" alt="image-20210713221339022" tabindex="0" loading="lazy"><figcaption>image-20210713221339022</figcaption></figure><h3 id="_3-2-2-引入eureka依赖" tabindex="-1"><a class="header-anchor" href="#_3-2-2-引入eureka依赖"><span>3.2.2.引入eureka依赖</span></a></h3><p>引入SpringCloud为eureka提供的starter依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-server&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-3-编写启动类" tabindex="-1"><a class="header-anchor" href="#_3-2-3-编写启动类"><span>3.2.3.编写启动类</span></a></h3><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> cn.itcast.eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableEurekaServer</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EurekaApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EurekaApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-4-编写配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-4-编写配置文件"><span>3.2.4.编写配置文件</span></a></h3><p>编写一个application.yml文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10086</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">eureka-server</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:10086/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-5-启动服务" tabindex="-1"><a class="header-anchor" href="#_3-2-5-启动服务"><span>3.2.5.启动服务</span></a></h3><p>启动微服务，然后在浏览器访问：http://127.0.0.1:10086</p><p>看到下面结果应该是成功了：</p><figure><img src="`+q+`" alt="image-20210713222157190" tabindex="0" loading="lazy"><figcaption>image-20210713222157190</figcaption></figure><h2 id="_3-3-服务注册" tabindex="-1"><a class="header-anchor" href="#_3-3-服务注册"><span>3.3.服务注册</span></a></h2><p>下面，我们将user-service注册到eureka-server中去。</p><h3 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖"><span>1）引入依赖</span></a></h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-client&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-配置文件"><span>2）配置文件</span></a></h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">userservice</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:10086/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-启动多个user-service实例" tabindex="-1"><a class="header-anchor" href="#_3-启动多个user-service实例"><span>3）启动多个user-service实例</span></a></h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><figure><img src="`+T+'" alt="image-20210713222656562" tabindex="0" loading="lazy"><figcaption>image-20210713222656562</figcaption></figure><p>然后，在弹出的窗口中，填写信息：</p><figure><img src="'+Z+'" alt="image-20210713222757702" tabindex="0" loading="lazy"><figcaption>image-20210713222757702</figcaption></figure><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><figure><img src="'+L+'" alt="image-20210713222841951" tabindex="0" loading="lazy"><figcaption>image-20210713222841951</figcaption></figure><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><figure><img src="'+w+'" alt="image-20210713223041491" tabindex="0" loading="lazy"><figcaption>image-20210713223041491</figcaption></figure><p>查看eureka-server管理页面：</p><figure><img src="'+O+`" alt="image-20210713223150650" tabindex="0" loading="lazy"><figcaption>image-20210713223150650</figcaption></figure><h2 id="_3-4-服务发现" tabindex="-1"><a class="header-anchor" href="#_3-4-服务发现"><span>3.4.服务发现</span></a></h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h3 id="_1-引入依赖-1" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖-1"><span>1）引入依赖</span></a></h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-client&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置文件-1" tabindex="-1"><a class="header-anchor" href="#_2-配置文件-1"><span>2）配置文件</span></a></h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">orderservice</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:10086/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-服务拉取和负载均衡" tabindex="-1"><a class="header-anchor" href="#_3-服务拉取和负载均衡"><span>3）服务拉取和负载均衡</span></a></h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><figure><img src="`+j+'" alt="image-20210713224049419" tabindex="0" loading="lazy"><figcaption>image-20210713224049419</figcaption></figure><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><figure><img src="'+J+'" alt="image-20210713224245731" tabindex="0" loading="lazy"><figcaption>image-20210713224245731</figcaption></figure><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p><h1 id="_4-ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#_4-ribbon负载均衡"><span>4.Ribbon负载均衡</span></a></h1><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h2 id="_4-1-负载均衡原理" tabindex="-1"><a class="header-anchor" href="#_4-1-负载均衡原理"><span>4.1.负载均衡原理</span></a></h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><figure><img src="'+P+'" alt="image-20210713224517686" tabindex="0" loading="lazy"><figcaption>image-20210713224517686</figcaption></figure><p>那么我们发出的请求明明是http://userservice/user/1，怎么变成了http://localhost:8081的呢？</p><h2 id="_4-2-源码跟踪" tabindex="-1"><a class="header-anchor" href="#_4-2-源码跟踪"><span>4.2.源码跟踪</span></a></h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="_1-loadbalancerintercepor" tabindex="-1"><a class="header-anchor" href="#_1-loadbalancerintercepor"><span>1）LoadBalancerIntercepor</span></a></h3><figure><img src="'+U+'" alt="1525620483637" tabindex="0" loading="lazy"><figcaption>1525620483637</figcaption></figure><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 http://user-service/user/8</li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="_2-loadbalancerclient" tabindex="-1"><a class="header-anchor" href="#_2-loadbalancerclient"><span>2）LoadBalancerClient</span></a></h3><p>继续跟入execute方法：</p><figure><img src="'+M+'" alt="1525620787090" tabindex="0" loading="lazy"><figcaption>1525620787090</figcaption></figure><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><figure><img src="'+i+'" alt="1525620835911" tabindex="0" loading="lazy"><figcaption>1525620835911</figcaption></figure><p>果然实现了负载均衡。</p><h3 id="_3-负载均衡策略irule" tabindex="-1"><a class="header-anchor" href="#_3-负载均衡策略irule"><span>3）负载均衡策略IRule</span></a></h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><figure><img src="'+i+'" alt="1525620835911" tabindex="0" loading="lazy"><figcaption>1525620835911</figcaption></figure><p>我们继续跟入：</p><figure><img src="'+V+'" alt="1544361421671" tabindex="0" loading="lazy"><figcaption>1544361421671</figcaption></figure><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><figure><img src="'+H+'" alt="1525622652849" tabindex="0" loading="lazy"><figcaption>1525622652849</figcaption></figure><p>我们看看这个rule是谁：</p><figure><img src="'+W+'" alt="1525622699666" tabindex="0" loading="lazy"><figcaption>1525622699666</figcaption></figure><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><figure><img src="'+Q+'" alt="1525622754316" tabindex="0" loading="lazy"><figcaption>1525622754316</figcaption></figure><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4）总结</span></a></h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><figure><img src="'+G+'" alt="image-20210713224724673" tabindex="0" loading="lazy"><figcaption>image-20210713224724673</figcaption></figure><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求http://userservice/user/1</li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到http://localhost:8081/user/1，发起真实请求</li></ul><h2 id="_4-3-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-3-负载均衡策略"><span>4.3.负载均衡策略</span></a></h2><h3 id="_4-3-1-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-3-1-负载均衡策略"><span>4.3.1.负载均衡策略</span></a></h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><figure><img src="'+Y+`" alt="image-20210713225653000" tabindex="0" loading="lazy"><figcaption>image-20210713225653000</figcaption></figure><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;</code>.<code>&lt;clientConfigNameSpace&gt;</code>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="_4-3-2-自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-3-2-自定义负载均衡策略"><span>4.3.2.自定义负载均衡策略</span></a></h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IRule</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> randomRule</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RandomRule</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">userservice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  ribbon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    NFLoadBalancerRuleClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.netflix.loadbalancer.RandomRule</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 负载均衡规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="_4-4-饥饿加载" tabindex="-1"><a class="header-anchor" href="#_4-4-饥饿加载"><span>4.4.饥饿加载</span></a></h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ribbon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  eager-load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    clients</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">userservice</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-nacos注册中心" tabindex="-1"><a class="header-anchor" href="#_5-nacos注册中心"><span>5.Nacos注册中心</span></a></h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="_5-1-认识和安装nacos" tabindex="-1"><a class="header-anchor" href="#_5-1-认识和安装nacos"><span>5.1.认识和安装Nacos</span></a></h2><p><a href="https://nacos.io/" target="_blank" rel="noopener noreferrer">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener noreferrer">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><figure><img src="`+K+`" alt="image-20210713230444308" tabindex="0" loading="lazy"><figcaption>image-20210713230444308</figcaption></figure><p>安装方式可以参考课前资料《Nacos安装指南.md》</p><h2 id="_5-2-服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#_5-2-服务注册到nacos"><span>5.2.服务注册到nacos</span></a></h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="_1-引入依赖-2" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖-2"><span>1）引入依赖</span></a></h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-alibaba-dependencies&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2.6.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;pom&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;import&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="_2-配置nacos地址" tabindex="-1"><a class="header-anchor" href="#_2-配置nacos地址"><span>2）配置nacos地址</span></a></h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost:8848</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="_3-重启" tabindex="-1"><a class="header-anchor" href="#_3-重启"><span>3）重启</span></a></h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><figure><img src="`+X+'" alt="image-20210713231439607" tabindex="0" loading="lazy"><figcaption>image-20210713231439607</figcaption></figure><h2 id="_5-3-服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#_5-3-服务分级存储模型"><span>5.3.服务分级存储模型</span></a></h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><figure><img src="'+$+'" alt="image-20210713232522531" tabindex="0" loading="lazy"><figcaption>image-20210713232522531</figcaption></figure><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><figure><img src="'+ii+`" alt="image-20210713232658928" tabindex="0" loading="lazy"><figcaption>image-20210713232658928</figcaption></figure><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="_5-3-1-给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#_5-3-1-给user-service配置集群"><span>5.3.1.给user-service配置集群</span></a></h3><p>修改user-service的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost:8848</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        cluster-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HZ</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 集群名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><figure><img src="`+si+'" alt="image-20210713232916215" tabindex="0" loading="lazy"><figcaption>image-20210713232916215</figcaption></figure><p>我们再次复制一个user-service启动配置，添加属性：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Dserver.port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=8083</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dspring.cloud.nacos.discovery.cluster-name=SH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置如图所示：</p><figure><img src="'+ai+'" alt="image-20210713233528982" tabindex="0" loading="lazy"><figcaption>image-20210713233528982</figcaption></figure><p>启动UserApplication3后再次查看nacos控制台：</p><figure><img src="'+ei+`" alt="image-20210713233727923" tabindex="0" loading="lazy"><figcaption>image-20210713233727923</figcaption></figure><h3 id="_5-3-2-同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_5-3-2-同集群优先的负载均衡"><span>5.3.2.同集群优先的负载均衡</span></a></h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spring:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  cloud:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    nacos:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      server-addr:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:8848</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      discovery:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        cluster-name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HZ</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 集群名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">userservice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  ribbon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    NFLoadBalancerRuleClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.alibaba.cloud.nacos.ribbon.NacosRule</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 负载均衡规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4-权重配置" tabindex="-1"><a class="header-anchor" href="#_5-4-权重配置"><span>5.4.权重配置</span></a></h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><figure><img src="`+ni+'" alt="image-20210713235133225" tabindex="0" loading="lazy"><figcaption>image-20210713235133225</figcaption></figure><p>在弹出的编辑窗口，修改权重：</p><figure><img src="'+li+'" alt="image-20210713235235219" tabindex="0" loading="lazy"><figcaption>image-20210713235235219</figcaption></figure><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="_5-5-环境隔离" tabindex="-1"><a class="header-anchor" href="#_5-5-环境隔离"><span>5.5.环境隔离</span></a></h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><figure><img src="'+ti+'" alt="image-20210714000101516" tabindex="0" loading="lazy"><figcaption>image-20210714000101516</figcaption></figure><h3 id="_5-5-1-创建namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-1-创建namespace"><span>5.5.1.创建namespace</span></a></h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><figure><img src="'+ri+'" alt="image-20210714000414781" tabindex="0" loading="lazy"><figcaption>image-20210714000414781</figcaption></figure><p>我们可以点击页面新增按钮，添加一个namespace：</p><figure><img src="'+pi+'" alt="image-20210714000440143" tabindex="0" loading="lazy"><figcaption>image-20210714000440143</figcaption></figure><p>然后，填写表单：</p><figure><img src="'+hi+'" alt="image-20210714000505928" tabindex="0" loading="lazy"><figcaption>image-20210714000505928</figcaption></figure><p>就能在页面看到一个新的namespace：</p><figure><img src="'+di+`" alt="image-20210714000522913" tabindex="0" loading="lazy"><figcaption>image-20210714000522913</figcaption></figure><h3 id="_5-5-2-给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-2-给微服务配置namespace"><span>5.5.2.给微服务配置namespace</span></a></h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost:8848</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        cluster-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HZ</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 命名空间，填ID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启order-service后，访问控制台，可以看到下面的结果：</p><figure><img src="`+gi+'" alt="image-20210714000830703" tabindex="0" loading="lazy"><figcaption>image-20210714000830703</figcaption></figure><figure><img src="'+ki+'" alt="image-20210714000837140" tabindex="0" loading="lazy"><figcaption>image-20210714000837140</figcaption></figure><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><figure><img src="'+ci+`" alt="image-20210714000941256" tabindex="0" loading="lazy"><figcaption>image-20210714000941256</figcaption></figure><h2 id="_5-6-nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#_5-6-nacos与eureka的区别"><span>5.6.Nacos与Eureka的区别</span></a></h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        ephemeral</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 设置为非临时实例</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><figure><img src="`+oi+'" alt="image-20210714001728017" tabindex="0" loading="lazy"><figcaption>image-20210714001728017</figcaption></figure><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul>',340),vi=[mi];function yi(Ai,Bi){return e(),a("div",null,vi)}const _i=s(ui,[["render",yi],["__file","SpringCloud01.html.vue"]]),Fi=JSON.parse('{"path":"/demo/back-ends/Java/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/Spring%20Cloud/SpringCloud01.html","title":"Spring Cloud 01","lang":"en-US","frontmatter":{"title":"Spring Cloud 01","order":1,"icon":"code","category":"Spring Cloud","description":"SpringCloud01 1.认识微服务 随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？ 1.0.学习目标 了解微服务架构的优缺点 1.1.单体架构 单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。 image-20210713202807818image...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/demo/back-ends/Java/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/Spring%20Cloud/SpringCloud01.html"}],["meta",{"property":"og:site_name","content":"Utopia"}],["meta",{"property":"og:title","content":"Spring Cloud 01"}],["meta",{"property":"og:description","content":"SpringCloud01 1.认识微服务 随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？ 1.0.学习目标 了解微服务架构的优缺点 1.1.单体架构 单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。 image-20210713202807818image..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-10T08:52:56.000Z"}],["meta",{"property":"article:author","content":"GXL"}],["meta",{"property":"article:modified_time","content":"2024-09-10T08:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Cloud 01\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-10T08:52:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GXL\\",\\"url\\":\\"https://www.cnblogs.com/feel-myself\\",\\"email\\":\\"gaoxiaoliang123@126.com\\"}]}"]]},"headers":[{"level":2,"title":"1.0.学习目标","slug":"_1-0-学习目标","link":"#_1-0-学习目标","children":[]},{"level":2,"title":"1.1.单体架构","slug":"_1-1-单体架构","link":"#_1-1-单体架构","children":[]},{"level":2,"title":"1.2.分布式架构","slug":"_1-2-分布式架构","link":"#_1-2-分布式架构","children":[]},{"level":2,"title":"1.3.微服务","slug":"_1-3-微服务","link":"#_1-3-微服务","children":[]},{"level":2,"title":"1.4.SpringCloud","slug":"_1-4-springcloud","link":"#_1-4-springcloud","children":[]},{"level":2,"title":"1.5.总结","slug":"_1-5-总结","link":"#_1-5-总结","children":[]},{"level":2,"title":"2.1.服务拆分原则","slug":"_2-1-服务拆分原则","link":"#_2-1-服务拆分原则","children":[]},{"level":2,"title":"2.2.服务拆分示例","slug":"_2-2-服务拆分示例","link":"#_2-2-服务拆分示例","children":[{"level":3,"title":"2.2.1.导入Sql语句","slug":"_2-2-1-导入sql语句","link":"#_2-2-1-导入sql语句","children":[]},{"level":3,"title":"2.2.2.导入demo工程","slug":"_2-2-2-导入demo工程","link":"#_2-2-2-导入demo工程","children":[]}]},{"level":2,"title":"2.3.实现远程调用案例","slug":"_2-3-实现远程调用案例","link":"#_2-3-实现远程调用案例","children":[{"level":3,"title":"2.3.1.案例需求：","slug":"_2-3-1-案例需求","link":"#_2-3-1-案例需求","children":[]},{"level":3,"title":"2.3.2.注册RestTemplate","slug":"_2-3-2-注册resttemplate","link":"#_2-3-2-注册resttemplate","children":[]},{"level":3,"title":"2.3.3.实现远程调用","slug":"_2-3-3-实现远程调用","link":"#_2-3-3-实现远程调用","children":[]}]},{"level":2,"title":"2.4.提供者与消费者","slug":"_2-4-提供者与消费者","link":"#_2-4-提供者与消费者","children":[]},{"level":2,"title":"3.1.Eureka的结构和作用","slug":"_3-1-eureka的结构和作用","link":"#_3-1-eureka的结构和作用","children":[]},{"level":2,"title":"3.2.搭建eureka-server","slug":"_3-2-搭建eureka-server","link":"#_3-2-搭建eureka-server","children":[{"level":3,"title":"3.2.1.创建eureka-server服务","slug":"_3-2-1-创建eureka-server服务","link":"#_3-2-1-创建eureka-server服务","children":[]},{"level":3,"title":"3.2.2.引入eureka依赖","slug":"_3-2-2-引入eureka依赖","link":"#_3-2-2-引入eureka依赖","children":[]},{"level":3,"title":"3.2.3.编写启动类","slug":"_3-2-3-编写启动类","link":"#_3-2-3-编写启动类","children":[]},{"level":3,"title":"3.2.4.编写配置文件","slug":"_3-2-4-编写配置文件","link":"#_3-2-4-编写配置文件","children":[]},{"level":3,"title":"3.2.5.启动服务","slug":"_3-2-5-启动服务","link":"#_3-2-5-启动服务","children":[]}]},{"level":2,"title":"3.3.服务注册","slug":"_3-3-服务注册","link":"#_3-3-服务注册","children":[{"level":3,"title":"1）引入依赖","slug":"_1-引入依赖","link":"#_1-引入依赖","children":[]},{"level":3,"title":"2）配置文件","slug":"_2-配置文件","link":"#_2-配置文件","children":[]},{"level":3,"title":"3）启动多个user-service实例","slug":"_3-启动多个user-service实例","link":"#_3-启动多个user-service实例","children":[]}]},{"level":2,"title":"3.4.服务发现","slug":"_3-4-服务发现","link":"#_3-4-服务发现","children":[{"level":3,"title":"1）引入依赖","slug":"_1-引入依赖-1","link":"#_1-引入依赖-1","children":[]},{"level":3,"title":"2）配置文件","slug":"_2-配置文件-1","link":"#_2-配置文件-1","children":[]},{"level":3,"title":"3）服务拉取和负载均衡","slug":"_3-服务拉取和负载均衡","link":"#_3-服务拉取和负载均衡","children":[]}]},{"level":2,"title":"4.1.负载均衡原理","slug":"_4-1-负载均衡原理","link":"#_4-1-负载均衡原理","children":[]},{"level":2,"title":"4.2.源码跟踪","slug":"_4-2-源码跟踪","link":"#_4-2-源码跟踪","children":[{"level":3,"title":"1）LoadBalancerIntercepor","slug":"_1-loadbalancerintercepor","link":"#_1-loadbalancerintercepor","children":[]},{"level":3,"title":"2）LoadBalancerClient","slug":"_2-loadbalancerclient","link":"#_2-loadbalancerclient","children":[]},{"level":3,"title":"3）负载均衡策略IRule","slug":"_3-负载均衡策略irule","link":"#_3-负载均衡策略irule","children":[]},{"level":3,"title":"4）总结","slug":"_4-总结","link":"#_4-总结","children":[]}]},{"level":2,"title":"4.3.负载均衡策略","slug":"_4-3-负载均衡策略","link":"#_4-3-负载均衡策略","children":[{"level":3,"title":"4.3.1.负载均衡策略","slug":"_4-3-1-负载均衡策略","link":"#_4-3-1-负载均衡策略","children":[]},{"level":3,"title":"4.3.2.自定义负载均衡策略","slug":"_4-3-2-自定义负载均衡策略","link":"#_4-3-2-自定义负载均衡策略","children":[]}]},{"level":2,"title":"4.4.饥饿加载","slug":"_4-4-饥饿加载","link":"#_4-4-饥饿加载","children":[]},{"level":2,"title":"5.1.认识和安装Nacos","slug":"_5-1-认识和安装nacos","link":"#_5-1-认识和安装nacos","children":[]},{"level":2,"title":"5.2.服务注册到nacos","slug":"_5-2-服务注册到nacos","link":"#_5-2-服务注册到nacos","children":[{"level":3,"title":"1）引入依赖","slug":"_1-引入依赖-2","link":"#_1-引入依赖-2","children":[]},{"level":3,"title":"2）配置nacos地址","slug":"_2-配置nacos地址","link":"#_2-配置nacos地址","children":[]},{"level":3,"title":"3）重启","slug":"_3-重启","link":"#_3-重启","children":[]}]},{"level":2,"title":"5.3.服务分级存储模型","slug":"_5-3-服务分级存储模型","link":"#_5-3-服务分级存储模型","children":[{"level":3,"title":"5.3.1.给user-service配置集群","slug":"_5-3-1-给user-service配置集群","link":"#_5-3-1-给user-service配置集群","children":[]},{"level":3,"title":"5.3.2.同集群优先的负载均衡","slug":"_5-3-2-同集群优先的负载均衡","link":"#_5-3-2-同集群优先的负载均衡","children":[]}]},{"level":2,"title":"5.4.权重配置","slug":"_5-4-权重配置","link":"#_5-4-权重配置","children":[]},{"level":2,"title":"5.5.环境隔离","slug":"_5-5-环境隔离","link":"#_5-5-环境隔离","children":[{"level":3,"title":"5.5.1.创建namespace","slug":"_5-5-1-创建namespace","link":"#_5-5-1-创建namespace","children":[]},{"level":3,"title":"5.5.2.给微服务配置namespace","slug":"_5-5-2-给微服务配置namespace","link":"#_5-5-2-给微服务配置namespace","children":[]}]},{"level":2,"title":"5.6.Nacos与Eureka的区别","slug":"_5-6-nacos与eureka的区别","link":"#_5-6-nacos与eureka的区别","children":[]}],"git":{"createdTime":1725956952000,"updatedTime":1725958376000,"contributors":[{"name":"udo-bit","email":"enote_gxl@163.com","commits":1}]},"readingTime":{"minutes":20.24,"words":6071},"filePathRelative":"demo/back-ends/Java/Java微服务基础/Spring Cloud/SpringCloud01.md","localizedDate":"September 10, 2024","excerpt":"\\n<h1>1.认识微服务</h1>\\n<p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p>\\n<h2>1.0.学习目标</h2>\\n<p>了解微服务架构的优缺点</p>\\n<h2>1.1.单体架构</h2>\\n<p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p>\\n<figure><figcaption>image-20210713202807818</figcaption></figure>\\n<p>单体架构的优缺点如下：</p>\\n<p><strong>优点：</strong></p>","autoDesc":true}');export{_i as comp,Fi as data};
