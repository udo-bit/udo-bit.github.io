import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,d as a}from"./app-DN-k00Id.js";const n={},l=a(`<h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><ol><li><code>public boolean equals(Object anObject)</code> 比较字符串的内容，严格区分大小写</li><li><code>public boolean equalsIgnoreCase(String anotherString)</code> 比较字符串的内容，忽略大小写</li><li><code>public int length()</code> 返回此字符串的长度</li><li><code>public char charAt(int index)</code> 返回指定索引处的 char 值</li><li><code>public char[] toCharArray()</code> 将字符串拆分为字符数组后返回</li><li><code>public String substring(int beginIndex, int endIndex)</code> 根据开始和结束索引进行截取，得到新的字符串（包含头，不包含尾）</li><li><code>public String substring(int beginIndex)</code> 从传入的索引处截取，截取到末尾，得到新的字符串</li><li><code>public String replace(CharSequence target, CharSequence replacement)</code> 使用新值，将字符串中的旧值替换，得到新的字符串</li><li><code>public String[] split(String regex)</code> 根据传入的规则切割字符串，得到字符串数组</li></ol><h2 id="integer" tabindex="-1"><a class="header-anchor" href="#integer"><span>Integer</span></a></h2><ol><li><code>public static Integer valueOf(int i)</code>: 返回表示指定的 int 值的 Integer 实例。</li><li><code>public static Integer valueOf(String s)</code>: 返回保存指定的 String 的值的 Integer 对象。</li><li><code>public static int parseInt(String s)</code>: 将字符串参数作为有符号的十进制整数进行解析。</li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>int 和 String 之间的转换<br> int -&gt; String <br> 方式一：直接在数字后加一个空字符串 <br> 方式二：使用String类的valueOf方法<br> String -&gt; int <br> 方式一：使用Integer类的parseInt方法 <br> 方式二：使用Integer类的valueOf方法返回Integer对象，再调用Integer对象的intValue方法<br></p></div><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays"><span>Arrays</span></a></h2><ol><li><code>public static String toString(int[] a)</code> 返回指定数组的内容的字符串表示形式</li><li><code>public static void sort(int[] a)</code> 按照数字顺序排列指定的数组</li><li><code>public static int binarySearch(int[] a, int key)</code> 利用二分查找返回指定元素的索引</li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>public static int binarySearch(int[] a, int key)</code> <br> 1,数组必须有序. <br> 2.如果要查找的元素存在,那么返回的是这个元素实际的索引 <br> 3.如果要查找的元素不存在,那么返回的是 (-插入点-1).插入点:如果这个元素在数组中,他应该在哪个索引上. <br></p></div><h2 id="throwable" tabindex="-1"><a class="header-anchor" href="#throwable"><span>Throwable</span></a></h2><ol><li><code>public String getMessage()</code> 返回此 throwable 的详细消息字符串</li><li><code>public String toString()</code> 返回此可抛出的简短描述</li><li><code>public void printStackTrace()</code> 把异常的错误信息输出在控制台</li><li>自定义异常 <ol><li>定义异常类</li><li>写继承关系</li><li>提供空参构造</li><li>提供带参构造</li></ol></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AgeOutOfBoundsException</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AgeOutOfBoundsException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AgeOutOfBoundsException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>Date</span></a></h2><ol><li><code>public long getTime()</code> 获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</li><li><code>public void setTime(long time)</code> 设置时间，给的是毫秒值</li></ol><h2 id="simpledateformat" tabindex="-1"><a class="header-anchor" href="#simpledateformat"><span>SimpleDateFormat</span></a></h2><ol><li><code>public SimpleDateFormat(String pattern)</code> 用给定的模式和默认语言环境的日期格式符号构造 SimpleDateFormat</li><li><code>public String format(Date date)</code> 将一个 Date 格式化为日期/时间字符串</li><li><code>public Date parse(String source)</code> 从给定字符串的开始解析文本，以生成一个日期</li><li></li></ol>`,15),s=[l];function r(c,o){return t(),e("div",null,s)}const h=i(n,[["render",r],["__file","Java笔记.html.vue"]]),g=JSON.parse('{"path":"/others/Java%E7%AC%94%E8%AE%B0.html","title":"Java基础","lang":"en-US","frontmatter":{"title":"Java基础","icon":"java","category":["Java"],"description":"String public boolean equals(Object anObject) 比较字符串的内容，严格区分大小写 public boolean equalsIgnoreCase(String anotherString) 比较字符串的内容，忽略大小写 public int length() 返回此字符串的长度 public char cha...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/others/Java%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"Utopia"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"String public boolean equals(Object anObject) 比较字符串的内容，严格区分大小写 public boolean equalsIgnoreCase(String anotherString) 比较字符串的内容，忽略大小写 public int length() 返回此字符串的长度 public char cha..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-27T10:26:32.000Z"}],["meta",{"property":"article:author","content":"GXL"}],["meta",{"property":"article:modified_time","content":"2024-08-27T10:26:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-27T10:26:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GXL\\",\\"url\\":\\"https://www.cnblogs.com/feel-myself\\",\\"email\\":\\"gaoxiaoliang123@126.com\\"}]}"]]},"headers":[{"level":2,"title":"String","slug":"string","link":"#string","children":[]},{"level":2,"title":"Integer","slug":"integer","link":"#integer","children":[]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]},{"level":2,"title":"Throwable","slug":"throwable","link":"#throwable","children":[]},{"level":2,"title":"Date","slug":"date","link":"#date","children":[]},{"level":2,"title":"SimpleDateFormat","slug":"simpledateformat","link":"#simpledateformat","children":[]}],"git":{"createdTime":1724596494000,"updatedTime":1724754392000,"contributors":[{"name":"udo-bit","email":"enote_gxl@163.com","commits":6}]},"readingTime":{"minutes":2.49,"words":748},"filePathRelative":"others/Java笔记.md","localizedDate":"August 25, 2024","excerpt":"<h2>String</h2>\\n<ol>\\n<li><code>public boolean equals(Object anObject)</code> 比较字符串的内容，严格区分大小写</li>\\n<li><code>public boolean equalsIgnoreCase(String anotherString)</code> 比较字符串的内容，忽略大小写</li>\\n<li><code>public int length()</code> 返回此字符串的长度</li>\\n<li><code>public char charAt(int index)</code> 返回指定索引处的 char 值</li>\\n<li><code>public char[] toCharArray()</code> 将字符串拆分为字符数组后返回</li>\\n<li><code>public String substring(int beginIndex, int endIndex)</code> 根据开始和结束索引进行截取，得到新的字符串（包含头，不包含尾）</li>\\n<li><code>public String substring(int beginIndex)</code> 从传入的索引处截取，截取到末尾，得到新的字符串</li>\\n<li><code>public String replace(CharSequence target, CharSequence replacement)</code> 使用新值，将字符串中的旧值替换，得到新的字符串</li>\\n<li><code>public String[] split(String regex)</code> 根据传入的规则切割字符串，得到字符串数组</li>\\n</ol>","autoDesc":true}');export{h as comp,g as data};
