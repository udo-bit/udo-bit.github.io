import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,d as l}from"./app-D9b6bxBt.js";const n="/assets/image-20210725144536958-DOsiPZ3w.png",t="/assets/image-20210725144725943-BmxXt6w6.png",d="/assets/image-20210725151543640-D8xmodPU.png",h="/assets/image-20210725151654046-Gqy3wsXu.png",p="/assets/image-20210725151729118-Cj7DxPnJ.png",k="/assets/image-20210725151940515-D66ZmTay.png",r="/assets/1688625944675-937ae7b5-369d-4f91-89bc-d751a1625bfc-BtyFBaId.png",c="/assets/1689241984932-dbda32fa-fc42-4990-9fbf-5610a360dc6a-CwHJll5C.png",o="/assets/1688630200518-15e2def1-9845-4163-97d5-a17550c53a1b-Cx-KAlxB.png",g="/assets/1688630300493-4ee6e412-c5bb-49a9-b8e8-7bb086aafcd7-bNiiEGby.png",A="/assets/1689242138161-e5687520-71fd-420b-9e0a-62bb0d15fdef-CkSW7lRr.png",y="/assets/1689242177182-33f58264-c687-4d01-a99e-cc39928f2bc6-D7YItd0w.png",u="/assets/1688634066223-3dea4dbf-1cd1-4528-a824-7808d0886fbf-CYfBJO25.png",m="/assets/1688634493742-8a385aa9-b6d0-435d-b020-a39c3e5361c2-CONVrrHK.png",v="/assets/1689242875379-dc0fd8da-4f4a-4c88-a940-14b33dce2ed0-CqeVnJW1.png",b="/assets/1689252256774-e9892d2b-0eec-4f77-a291-422b38cb2e59-jdX2-tgO.png",B="/assets/1688643501266-d56733f1-77ec-4af5-9e27-ccbbe3de877b-CYmj4b1h.png",F="/assets/1688643691794-2e1745b2-2220-47cd-b062-4e88715c0429-CVgqoCnP.png",f="/assets/1688643733459-d38865ce-f51f-4685-87ea-d8948a1c8085-B-q_3wN7.png",C="/assets/1688643761329-0a199db9-69ca-406b-aacf-c9b010a8d5ac-RA11IsLB.png",_="/assets/1688643816180-b33bf24a-6b73-4565-9665-f1ff8c23d49c-D7W5cK1X.png",E="/assets/1688643861034-e947791e-0af9-482d-a1b3-3f97660dabaf-DBWmuZkX.png",D="/assets/1688643963076-b6c11c3c-b78d-4fa9-9238-d33aeef3f4ab-YcuUtQpk.png",R="/assets/1688644126202-1b0ce848-4094-4aef-aec4-044aaed741b7-BsC9P0S6.png",q="/assets/1688644492994-1ec52b82-9d34-4ab5-b97b-6525ea0edb32-B55JNCcl.png",x="/assets/1688645960290-e074aff2-d5e7-483d-8eb7-857d999cd034-Cj5oro-V.png",L="/assets/1688699677688-49ad3c72-8192-4472-8619-f9487949870d-CVYCeYHQ.png",S="/assets/1688699796808-3af5dac7-910e-4b9b-8abe-e0599f7feb73-ztkuuo-9.png",z="/assets/1688699857473-f0e8d287-50c0-4c58-9289-396896f4ca5f-D47J8lsa.png",O="/assets/1688700023476-e993650e-b916-421a-abd8-036cfafbe0f8-B8pTSscC.png",T="/assets/1689252366757-3261e744-d8e6-4148-b46b-4df4d3302046-Ywl1swUS.png",K="/assets/1688700570022-0eb7dd4f-8c71-4032-894a-9059be43bcdf-CnoRKRU8.png",I="/assets/1688700777894-3a4c871a-f780-4b36-a696-ba564a080a80-CgfAuP9v.png",w="/assets/1688723231792-55958c63-d576-475c-86b8-12213953b376-D-IEt2pB.png",Y="/assets/1688783398298-2ad85ae6-8570-4d7c-a04e-6ab256db4756-Dg_X_c2y.jpeg",U="/assets/1688798999889-703be70d-0e98-43e8-9f9a-b98f373236e3-CuU2aowe.jpeg",N="/assets/1688800015208-f257cf87-4a95-4243-9fa2-103c5c1dc553-BsqnzGI-.png",j="/assets/1688800444875-dfb9f1ae-0ca0-4faa-890a-e131bf400937-BPdGPgQa.png",P="/assets/1688800521206-88171df9-c7f5-49e8-aa27-d8d895922711-LWLlFY8f.png",J="/assets/1688801184323-0309b100-b3a9-45d1-afe1-59e34922158e-BjoRqBNt.png",G="/assets/1688801875510-505a4e04-592e-4d99-8e31-b733677b1173-F6SxedDN.png",H="/assets/1688802092260-80433e58-25d1-45cd-9e3b-aba94ddbf327-Dfwa5l7j.png",Z="/assets/1688802479112-064ff814-2e7b-4dac-a376-3dac457905cb-BtfCndk2.png",W="/assets/1688803168147-f4a9288e-b0aa-4c39-a63b-f4bf43bf3ec3-BHMYdEqI.png",M="/assets/1688803269096-fb71a200-50ed-422b-b270-d8d2aeeefb29-CZxU99M2.png",i="/assets/1688809914221-d8c37028-4341-407f-aa2b-e68045dcf931-5OxPtKeH.png",V="/assets/1688890340735-8d94d9cf-f79d-48a3-ac7f-3d7580689e87-C5wK4uPK.png",X="/assets/1688891157725-d3d31b39-dea0-4769-96a7-d344a2065856-r9LhMc-w.png",Q="/assets/1688892087458-fcc69b86-e594-46c6-8bd3-ba968263613d-SVprXENQ.png",$="/assets/1688893449488-a8cac8a4-0105-4a29-8149-53352529eed6-BTsQ2-k7.png",ii="/assets/1688906187506-1bd2d6f8-eb07-4204-bc6e-c9e67deb4ebb-DTXIr8uU.png",si="/assets/1688960623669-a18d7743-ad9a-4871-9c0b-6fa5c3feea8d-DnIaS2Gt.png",ai="/assets/1688960690319-5cf59ae6-0b43-4805-85b2-276a6d794b9e-BLEx-sPo.png",ei="/assets/1688960939368-432b3e8b-6c11-406b-9b31-a7b7477bf381-DWp50IXZ.png",li="/assets/1688960953409-3ce092e0-b7d6-4e20-860f-dfd7b5e6a850-oPDlY1iZ.png",ni="/assets/1688979003500-0b2fb20f-e0eb-43a0-bbd6-1c9cf86114da-34_Tp90K.png",ti="/assets/1688981423905-221d50ce-68cc-4949-9324-dbfd13d1cc45-BCyo6CAb.png",di="/assets/1688982283070-48b2b66a-d32a-4141-91ff-8d1b74e969ec-BFnpNrKr.png",hi="/assets/1688991794223-ac85dc21-1220-46b9-a58d-b867202228d4-DpRQ8Soq.png",pi="/assets/1688991892514-20f2ca95-eb32-4502-8fa7-4057caa1d11a-DY8voT0Z.png",ki="/assets/1688992380251-73faba8c-bd4c-42ff-89cb-208dac34b88a-DxfLwBPt.png",ri="/assets/1688992597881-df70c868-612f-4394-9b59-4391a3bfdcb8-CGWy-smA.png",ci="/assets/1688996191672-a29b0b6d-ab19-4819-a5e7-b35324d79c97-CPoYhR4s.png",oi={},gi=l('<h1 id="day10-redis高级" tabindex="-1"><a class="header-anchor" href="#day10-redis高级"><span>day10-Redis高级</span></a></h1><h1 id="_1-补-redis-持久化" tabindex="-1"><a class="header-anchor" href="#_1-补-redis-持久化"><span>1(补) Redis 持久化</span></a></h1><h1 id="_1-redis持久化" tabindex="-1"><a class="header-anchor" href="#_1-redis持久化"><span>1.Redis持久化</span></a></h1><p>Redis有两种持久化方案：</p><ul><li>RDB持久化</li><li>AOF持久化</li></ul><h2 id="_1-1-rdb持久化" tabindex="-1"><a class="header-anchor" href="#_1-1-rdb持久化"><span>1.1.RDB持久化</span></a></h2><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。</p><h3 id="_1-1-1-执行时机" tabindex="-1"><a class="header-anchor" href="#_1-1-1-执行时机"><span>1.1.1.执行时机</span></a></h3><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令</li><li>执行bgsave命令</li><li>Redis停机时</li><li>触发RDB条件时</li></ul><p><strong>1）save命令</strong></p><p>执行下面的命令，可以立即执行一次RDB：</p><figure><img src="'+n+'" alt="image-20210725144536958" tabindex="0" loading="lazy"><figcaption>image-20210725144536958</figcaption></figure><p>save命令会导致主进程执行RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p><p><strong>2）bgsave命令</strong></p><p>下面的命令可以异步执行RDB：</p><figure><img src="'+t+`" alt="image-20210725144725943" tabindex="0" loading="lazy"><figcaption>image-20210725144725943</figcaption></figure><p>这个命令执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。</p><p><strong>3）停机时</strong></p><p>Redis停机时会执行一次save命令，实现RDB持久化。</p><p><strong>4）触发RDB条件</strong></p><p>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">save 900 1  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 或者 300秒内，如果至少有10个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">save 300 10  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 或者60秒内，如果至少有10000个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">save 60 10000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RDB的其它配置也可以在redis.conf文件中设置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">rdbcompression yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># RDB文件名称</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">dbfilename dump.rdb  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 文件保存的路径目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">dir ./</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-1-aof原理" tabindex="-1"><a class="header-anchor" href="#_1-2-1-aof原理"><span>1.2.1.AOF原理</span></a></h3><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><figure><img src="`+d+`" alt="image-20210725151543640" tabindex="0" loading="lazy"><figcaption>image-20210725151543640</figcaption></figure><h3 id="_1-2-2-aof配置" tabindex="-1"><a class="header-anchor" href="#_1-2-2-aof配置"><span>1.2.2.AOF配置</span></a></h3><p>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 是否开启AOF功能，默认是no</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendonly yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># AOF文件的名称</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendfilename </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;appendonly.aof&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AOF的命令记录的频率也可以通过redis.conf文件来配：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 表示每执行一次写命令，立即记录到AOF文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendfsync always </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendfsync everysec </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendfsync no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三种策略对比：</p><figure><img src="`+h+'" alt="image-20210725151654046" tabindex="0" loading="lazy"><figcaption>image-20210725151654046</figcaption></figure><h3 id="_1-2-3-aof文件重写" tabindex="-1"><a class="header-anchor" href="#_1-2-3-aof文件重写"><span>1.2.3.AOF文件重写</span></a></h3><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><figure><img src="'+p+`" alt="image-20210725151729118" tabindex="0" loading="lazy"><figcaption>image-20210725151729118</figcaption></figure><p>如图，AOF原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF文件内容就是：<code>mset name jack num 666</code></p><p>Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># AOF文件比上次文件 增长超过多少百分比则触发重写</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">auto-aof-rewrite-percentage 100</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># AOF文件体积最小多大以上才触发重写 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">auto-aof-rewrite-min-size 64mb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-rdb与aof对比" tabindex="-1"><a class="header-anchor" href="#_1-3-rdb与aof对比"><span>1.3.RDB与AOF对比</span></a></h2><p>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><figure><img src="`+k+'" alt="image-20210725151940515" tabindex="0" loading="lazy"><figcaption>image-20210725151940515</figcaption></figure><p>经过前几天的学习，大家已经掌握了微服务相关技术的实际应用，能够应对企业开发的要求了。不过大家都知道在IT领域往往都是面试造火箭，实际工作拧螺丝。</p><p>为了更好的应对面试，让大家能拿到更高的offer，我们接下来就讲讲“造火箭”的事情。</p><p>接下来的内容主要包括以下几方面：</p><p>Redis高级：</p><ul><li>Redis主从</li><li>Redis哨兵</li><li>Redis分片集群</li><li>Redis数据结构</li><li>Redis内存回收</li><li>Redis缓存一致性</li></ul><p>微服务高级：</p><ul><li>Eureka和Nacos对比</li><li>Ribbon和SpringCloudLoadBalancer</li><li>Hystix和Sentinel</li><li>限流算法</li></ul><h1 id="_1-redis主从" tabindex="-1"><a class="header-anchor" href="#_1-redis主从"><span>1.Redis主从</span></a></h1><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。</p><h2 id="_1-1-主从集群结构" tabindex="-1"><a class="header-anchor" href="#_1-1-主从集群结构"><span>1.1.主从集群结构</span></a></h2><p>下图就是一个简单的Redis主从集群结构：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如图所示，集群中有一个master节点、两个slave节点（现在叫replica）。当我们通过Redis的Java客户端访问主从集群时，应该做好路由：</p><ul><li>如果是写操作，应该访问master节点，master会自动将数据同步给两个slave节点</li><li>如果是读操作，建议访问各个slave节点，从而分担并发压力</li></ul><h2 id="_1-2-搭建主从集群" tabindex="-1"><a class="header-anchor" href="#_1-2-搭建主从集群"><span>1.2.搭建主从集群</span></a></h2><p>我们会在同一个虚拟机中利用3个Docker容器来搭建主从集群，容器信息如下：</p><table><thead><tr><th><strong>容器名</strong></th><th><strong>角色</strong></th><th><strong>IP</strong></th><th><strong>映射端口</strong></th></tr></thead><tbody><tr><td>r1</td><td>master</td><td>192.168.200.146</td><td>7001</td></tr><tr><td>r2</td><td>slave</td><td>192.168.200.146</td><td>7002</td></tr><tr><td>r3</td><td>slave</td><td>192.168.200.146</td><td>7003</td></tr></tbody></table><h3 id="_1-2-1-启动多个redis实例" tabindex="-1"><a class="header-anchor" href="#_1-2-1-启动多个redis实例"><span>1.2.1.启动多个Redis实例</span></a></h3><p>我们利用课前资料提供的docker-compose文件来构建主从集群：</p><figure><img src="'+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>文件内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7002&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7003&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将其上传至虚拟机的<code>/root/redis</code>目录下：</p><figure><img src="`+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>执行命令，运行集群：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看docker容器，发现都正常启动了：</p><figure><img src="'+A+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于采用的是host模式，我们看不到端口映射。不过能直接在宿主机通过ps命令查看到Redis进程：</p><figure><img src="'+y+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1-2-2-建立集群" tabindex="-1"><a class="header-anchor" href="#_1-2-2-建立集群"><span>1.2.2.建立集群</span></a></h3><p>虽然我们启动了3个Redis实例，但是它们并没有形成主从关系。我们需要通过命令来配置主从关系：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Redis5.0以前</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slaveof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masteri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masterpor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Redis5.0以后</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replicaof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masteri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masterpor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有临时和永久两种模式：</p><ul><li>永久生效：在redis.conf文件中利用<code>slaveof</code>命令指定<code>master</code>节点</li><li>临时生效：直接利用redis-cli控制台输入<code>slaveof</code>命令，指定<code>master</code>节点</li></ul><p>我们测试临时模式，首先连接<code>r2</code>，让其以<code>r1</code>为master</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 连接r2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 认r1主，也就是7001</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slaveof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.200.146</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后连接<code>r3</code>，让其以<code>r1</code>为master</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 连接r3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 认r1主，也就是7001</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slaveof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.200.146</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后连接<code>r1</code>，查看集群状态：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 连接r1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看集群状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> replication</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:7001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">info</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> replication</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Replication</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">role:master</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connected_slaves:2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slave0:ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=192.168.200.146,port=7002,state=online,offset=140,lag=1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slave1:ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=192.168.200.146,port=7003,state=online,offset=140,lag=1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">master_failover_state:no-failover</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">master_replid:16d90568498908b322178ca12078114e6c518b86</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">master_replid2:0000000000000000000000000000000000000000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">master_repl_offset:140</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">second_repl_offset:-1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repl_backlog_active:1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repl_backlog_size:1048576</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repl_backlog_first_byte_offset:1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repl_backlog_histlen:140</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当前节点<code>r1:7001</code>的角色是<code>master</code>，有两个slave与其连接：</p><ul><li><code>slave0</code>：<code>port</code>是<code>7002</code>，也就是<code>r2</code>节点</li><li><code>slave1</code>：<code>port</code>是<code>7003</code>，也就是<code>r3</code>节点</li></ul><h3 id="_1-2-3-测试" tabindex="-1"><a class="header-anchor" href="#_1-2-3-测试"><span>1.2.3.测试</span></a></h3><p>依次在<code>r1</code>、<code>r2</code>、<code>r3</code>节点上执行下面命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现，只有在<code>r1</code>这个节点上可以执行<code>set</code>命令（<strong>写操作</strong>），其它两个节点只能执行<code>get</code>命令（<strong>读操作</strong>）。也就是说读写操作已经分离了。</p><h2 id="_1-3-主从同步原理" tabindex="-1"><a class="header-anchor" href="#_1-3-主从同步原理"><span>1.3.主从同步原理</span></a></h2><p>在刚才的主从测试中，我们发现<code>r1</code>上写入Redis的数据，在<code>r2</code>和<code>r3</code>上也能看到，这说明主从之间确实完成了数据同步。</p><p>那么这个同步是如何完成的呢？</p><h3 id="_1-3-1-全量同步" tabindex="-1"><a class="header-anchor" href="#_1-3-1-全量同步"><span>1.3.1.全量同步</span></a></h3><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将master节点的所有数据都拷贝给slave节点，流程：</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里有一个问题，<code>master</code>如何得知<code>salve</code>是否是第一次来同步呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><code>**Replication Id**</code>：简称<code>replid</code>，是数据集的标记，replid一致则是同一数据集。每个<code>master</code>都有唯一的<code>replid</code>，<code>slave</code>则会继承 <code>master</code>节点的<code>replid</code></li><li><code>**offset**</code>：偏移量，随着记录在<code>repl_baklog</code>中的数据增多而逐渐增大。<code>slave</code>完成同步时也会记录当前同步的<code>offset</code>。如果 <code>slave</code>的<code>offset</code>小于<code>master</code>的<code>offset</code>，说明<code>slave</code>数据落后于<code>master</code>，需要更新。</li></ul><p>因此<code>slave</code>做数据同步，必须向<code>master</code>声明自己的<code>replication id </code>和<code>offset</code>，<code>master</code>才可以判断到底需要同步哪些数据。</p><p>由于我们在执行<code>slaveof</code>命令之前，所有redis节点都是<code>master</code>，有自己的<code>replid</code>和<code>offset</code>。</p><p>当我们第一次执行<code>slaveof</code>命令，与<code>master</code>建立主从关系时，发送的<code>replid</code>和<code>offset</code>是自己的，与<code>master</code>肯定不一致。</p><p><code>master</code>判断发现<code>slave</code>发送来的<code>replid</code>与自己的不一致，说明这是一个全新的slave，就知道要做全量同步了。</p><p><code>master</code>会将自己的<code>replid</code>和<code>offset</code>都发送给这个<code>slave</code>，<code>slave</code>保存这些信息到本地。自此以后<code>slave</code>的<code>replid</code>就与<code>master</code> 一致了。</p><p>因此，<strong>master判断一个节点是否是第一次同步的依据，就是看replid是否一致</strong>。流程如图：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>完整流程描述：</p><ul><li><code>slave</code>节点请求增量同步</li><li><code>master</code>节点判断<code>replid</code>，发现不一致，拒绝增量同步</li><li><code>master</code>将完整内存数据生成<code>RDB</code>，发送<code>RDB</code>到<code>slave</code></li><li><code>slave</code>清空本地数据，加载<code>master</code>的<code>RDB</code></li><li><code>master</code>将<code>RDB</code>期间的命令记录在<code>repl_baklog</code>，并持续将log中的命令发送给<code>slave</code></li><li><code>slave</code>执行接收到的命令，保持与<code>master</code>之间的同步</li></ul><p>来看下<code>r1</code>节点的运行日志：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再看下<code>r2</code>节点执行<code>replicaof</code>命令时的日志：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与我们描述的完全一致。</p><h3 id="_1-3-2-增量同步" tabindex="-1"><a class="header-anchor" href="#_1-3-2-增量同步"><span>1.3.2.增量同步</span></a></h3><p>全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做 <strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新slave与master存在差异的部分数据。如图：</p><figure><img src="'+B+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那么master怎么知道slave与自己的数据差异在哪里呢?</p><h3 id="_1-3-3-repl-baklog原理" tabindex="-1"><a class="header-anchor" href="#_1-3-3-repl-baklog原理"><span>1.3.3.repl_baklog原理</span></a></h3><p>master怎么知道slave与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的<code>repl_baklog</code>文件了。这个文件是一个固定大小的数组，只不过数组是环形，也就是说**角标到达数组末尾后，会再次从0开始读写 **，这样数组头部的数据就会被覆盖。</p><p><code>repl_baklog</code>中会记录Redis处理过的命令及<code>offset</code>，包括master当前的<code>offset</code>，和slave已经拷贝到的<code>offset</code>：</p><figure><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。</p><p>随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset：</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>直到数组被填满：</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是，如果slave出现网络阻塞，导致master的<code>offset</code>远远超过了slave的<code>offset</code>：</p><figure><img src="'+E+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果master继续写入新数据，master的<code>offset</code>就会覆盖<code>repl_baklog</code>中旧的数据，直到将slave现在的<code>offset</code>也覆盖：</p><figure><img src="'+D+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果slave恢复，需要同步，却发现自己的<code>offset</code>都没有了，无法完成增量同步了。只能做 <strong>全量同步</strong>。</p><p><code>repl_baklog</code>大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，导致尚未备份的数据被覆盖，则无法基于<code>repl_baklog</code> 做增量同步，只能再次全量同步。</p><h2 id="_1-4-主从同步优化" tabindex="-1"><a class="header-anchor" href="#_1-4-主从同步优化"><span>1.4.主从同步优化</span></a></h2><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置<code>repl-diskless-sync yes</code>启用无磁盘复制，避免全量同步时的磁盘IO。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高<code>repl_baklog</code>的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用<code>主-从-从</code>链式结构，减少master压力</li></ul><p><code>主-从-从</code>架构图：</p><figure><img src="'+R+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在<code>repl_baklog</code>中能找到offset时</li></ul><h1 id="_2-redis哨兵" tabindex="-1"><a class="header-anchor" href="#_2-redis哨兵"><span>2.Redis哨兵</span></a></h1><p>主从结构中master节点的作用非常重要，一旦故障就会导致集群不可用。那么有什么办法能保证主从集群的高可用性呢？</p><h2 id="_2-1-哨兵工作原理" tabindex="-1"><a class="header-anchor" href="#_2-1-哨兵工作原理"><span>2.1.哨兵工作原理</span></a></h2><p>Redis提供了<code>哨兵</code>（<code>Sentinel</code>）机制来监控主从集群监控状态，确保集群的高可用性。</p><h3 id="_2-1-1-哨兵作用" tabindex="-1"><a class="header-anchor" href="#_2-1-1-哨兵作用"><span>2.1.1.哨兵作用</span></a></h3><p>哨兵集群作用原理图：</p><figure><img src="'+q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>哨兵的作用如下：</p><ul><li><strong>状态监控</strong>：<code>Sentinel</code> 会不断检查您的<code>master</code>和<code>slave</code>是否按预期工作</li><li><strong>故障恢复（failover）</strong>：如果<code>master</code>故障，<code>Sentinel</code>会将一个<code>slave</code>提升为<code>master</code>。当故障实例恢复后会成为<code>slave</code></li><li><strong>状态通知</strong>：<code>Sentinel</code>充当<code>Redis</code>客户端的服务发现来源，当集群发生<code>failover</code>时，会将最新集群信息推送给<code>Redis</code>的客户端</li></ul><p>那么问题来了，<code>Sentinel</code>怎么知道一个Redis节点是否宕机呢？</p><h3 id="_2-1-2-状态监控" tabindex="-1"><a class="header-anchor" href="#_2-1-2-状态监控"><span>2.1.2.状态监控</span></a></h3><p><code>Sentinel</code>基于心跳机制监测服务状态，每隔1秒向集群的每个节点发送ping命令，并通过实例的响应结果来做出判断：</p><ul><li><strong>主观下线（sdown）</strong>：如果某sentinel节点发现某Redis节点未在规定时间响应，则认为该节点主观下线。</li><li><strong>客观下线(odown)</strong>：若超过指定数量（通过<code>quorum</code> 设置）的sentinel都认为该节点主观下线，则该节点客观下线。quorum值最好超过Sentinel节点数量的一半，Sentinel节点数量至少3台。</li></ul><p>如图：</p><figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：</p><ul><li>首先会判断slave节点与master节点断开时间长短，如果超过<code>down-after-milliseconds * 10</code>则会排除该slave节点</li><li>然后判断slave节点的<code>slave-priority</code>值，越小优先级越高，如果是0则永不参与选举（默认都是1）。</li><li>如果<code>slave-prority</code>一样，则判断slave节点的<code>offset</code>值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的<code>run_id</code>大小，越小优先级越高（<code>通过info server可以查看run_id</code>）。</li></ul><p>对应的官方文档如下：</p><p>https://redis.io/docs/management/sentinel/#replica-selection-and-priority</p><p>问题来了，当选出一个新的master后，该如何实现身份切换呢？</p><p>大概分为两步：</p><ul><li>在多个<code>sentinel</code>中选举一个<code>leader</code></li><li>由<code>leader</code>执行<code>failover</code></li></ul><h3 id="_2-1-3-选举leader" tabindex="-1"><a class="header-anchor" href="#_2-1-3-选举leader"><span>2.1.3.选举leader</span></a></h3><p>首先，Sentinel集群要选出一个执行<code>failover</code>的Sentinel节点，可以成为<code>leader</code>。要成为<code>leader</code>要满足两个条件：</p><ul><li>最先获得超过半数的投票</li><li>获得的投票数不小于<code>quorum</code>值</li></ul><p>而sentinel投票的原则有两条：</p><ul><li>优先投票给目前得票最多的</li><li>如果目前没有任何节点的票，就投给自己</li></ul><p>比如有3个sentinel节点，<code>s1</code>、<code>s2</code>、<code>s3</code>，假如<code>s2</code>先投票：</p><ul><li>此时发现没有任何人在投票，那就投给自己。<code>s2</code>得1票</li><li>接着<code>s1</code>和<code>s3</code>开始投票，发现目前<code>s2</code>票最多，于是也投给<code>s2</code>，<code>s2</code>得3票</li><li><code>s2</code>称为<code>leader</code>，开始故障转移</li></ul><p>不难看出，<strong>谁先投票，谁就会称为leader</strong>，那什么时候会触发投票呢？</p><p>答案是<strong>第一个确认master客观下线的人会立刻发起投票，一定会成为leader</strong>。</p><p>OK，<code>sentinel</code>找到<code>leader</code>以后，该如何完成<code>failover</code>呢？</p><h3 id="_2-1-4-failover" tabindex="-1"><a class="header-anchor" href="#_2-1-4-failover"><span>2.1.4.failover</span></a></h3><p>我们举个例子，有一个集群，初始状态下7001为<code>master</code>，7002和7003为<code>slave</code>：</p><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假如master发生故障，slave1当选。则故障转移的流程如下：</p><p>1）<code>sentinel</code>给备选的<code>slave1</code>节点发送<code>slaveof no one</code>命令，让该节点成为<code>master</code></p><figure><img src="'+S+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>2）<code>sentinel</code>给所有其它<code>slave</code>发送<code>slaveof 192.168.200.146 7002</code> 命令，让这些节点成为新<code>master</code>，也就是<code>7002</code>的<code>slave</code> 节点，开始从新的<code>master</code>上同步数据。</p><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>3）最后，当故障节点恢复后会接收到哨兵信号，执行<code>slaveof 192.168.200.146 7002</code>命令，成为<code>slave</code>：</p><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-2-搭建哨兵集群" tabindex="-1"><a class="header-anchor" href="#_2-2-搭建哨兵集群"><span>2.2.搭建哨兵集群</span></a></h2><p>首先，我们停掉之前的redis集群：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，我们找到课前资料提供的sentinel.conf文件：</p><figure><img src="'+T+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其内容如下：</p><div class="language-basic line-numbers-mode" data-highlighter="shiki" data-ext="basic" data-title="basic" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sentinel announce-ip &quot;192.168.200.146&quot;</span></span>
<span class="line"><span>sentinel monitor hmaster 192.168.200.146 7001 2</span></span>
<span class="line"><span>sentinel down-after-milliseconds hmaster 5000</span></span>
<span class="line"><span>sentinel failover-timeout hmaster 60000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><p><code>sentinel announce-ip &quot;192.168.200.146&quot;</code>：声明当前sentinel的ip</p></li><li><p><code>sentinel monitor hmaster 192.168.200.146 7001 2</code>：指定集群的主节点信息</p></li><li><ul><li><code>hmaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.200.146 7001</code>：主节点的ip和端口</li><li><code>2</code>：认定<code>master</code>下线时的<code>quorum</code>值</li></ul></li><li><p><code>sentinel down-after-milliseconds hmaster 5000</code>：声明master节点超时多久后被标记下线</p></li><li><p><code>sentinel failover-timeout hmaster 60000</code>：在第一次故障转移失败后多久再次重试</p></li></ul><p>我们在虚拟机的<code>/root/redis</code>目录下新建3个文件夹：<code>s1</code>、<code>s2</code>、<code>s3</code>:</p><figure><img src="`+K+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>将课前资料提供的<code>sentinel.conf</code>文件分别拷贝一份到3个文件夹中。</p><p>接着修改<code>docker-compose.yaml</code>文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7002&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--slaveof&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;192.168.200.146&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7003&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--slaveof&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;192.168.200.146&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/redis/s1:/etc/redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-sentinel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/etc/redis/sentinel.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;27001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  s2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/redis/s2:/etc/redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-sentinel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/etc/redis/sentinel.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;27002&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  s3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/redis/s3:/etc/redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-sentinel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/etc/redis/sentinel.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;27003&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行命令，启动集群：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+I+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们以s1节点为例，查看其运行日志：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Sentinel ID is 8e91bd24ea8e5eb2aee38f1cf796dcb26bb88acf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># +monitor master hmaster 192.168.200.146 7001 quorum 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* +slave slave 192.168.200.146:7003 192.168.200.146 7003 @ hmaster 192.168.200.146 7001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* +sentinel sentinel 5bafeb97fc16a82b431c339f67b015a51dad5e4f 192.168.200.146 27002 @ hmaster 192.168.200.146 7001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* +sentinel sentinel 56546568a2f7977da36abd3d2d7324c6c3f06b8d 192.168.200.146 27003 @ hmaster 192.168.200.146 7001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* +slave slave 192.168.200.146:7002 192.168.200.146 7002 @ hmaster 192.168.200.146 7001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>sentinel</code>已经联系到了<code>7001</code>这个节点，并且与其它几个哨兵也建立了链接。哨兵信息如下：</p><ul><li><code>27001</code>：<code>Sentinel ID</code>是<code>8e91bd24ea8e5eb2aee38f1cf796dcb26bb88acf</code></li><li><code>27002</code>：<code>Sentinel ID</code>是<code>5bafeb97fc16a82b431c339f67b015a51dad5e4f</code></li><li><code>27003</code>：<code>Sentinel ID</code>是<code>56546568a2f7977da36abd3d2d7324c6c3f06b8d</code></li></ul><h2 id="_2-3-演示failover" tabindex="-1"><a class="header-anchor" href="#_2-3-演示failover"><span>2.3.演示failover</span></a></h2><p>接下来，我们演示一下当主节点故障时，哨兵是如何完成集群故障恢复（failover）的。</p><p>我们连接<code>7001</code>这个<code>master</code>节点，然后通过命令让其休眠60秒，模拟宕机：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 连接7001这个master节点，通过sleep模拟服务宕机，60秒后自动恢复</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEBUG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>稍微等待一段时间后，会发现sentinel节点触发了<code>failover</code>：</p><figure><img src="`+w+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-4-总结"><span>2.4.总结</span></a></h2><p>Sentinel的三个作用是什么？</p><ul><li>集群监控</li><li>故障恢复</li><li>状态通知</li></ul><p>Sentinel如何判断一个redis实例是否健康？</p><ul><li>每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线（<code>sdown</code>）</li><li>如果大多数sentinel都认为实例主观下线，则判定服务客观下线（<code>odown</code>）</li></ul><p>故障转移步骤有哪些？</p><ul><li>首先要在<code>sentinel</code>中选出一个<code>leader</code>，由leader执行<code>failover</code></li><li>选定一个<code>slave</code>作为新的<code>master</code>，执行<code>slaveof noone</code>，切换到master模式</li><li>然后让所有节点都执行<code>slaveof</code> 新master</li><li>修改故障节点配置，添加<code>slaveof</code> 新master</li></ul><p>sentinel选举leader的依据是什么？</p><ul><li>票数超过sentinel节点数量1半</li><li>票数超过quorum数量</li><li>一般情况下最先发起failover的节点会当选</li></ul><p>sentinel从slave中选取master的依据是什么？</p><ul><li>首先会判断slave节点与master节点断开时间长短，如果超过<code>down-after-milliseconds * 10</code>则会排除该slave节点</li><li>然后判断slave节点的<code>slave-priority</code>值，越小优先级越高，如果是0则永不参与选举（默认都是1）。</li><li>如果<code>slave-prority</code>一样，则判断slave节点的<code>offset</code>值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的<code>run_id</code>大小，越小优先级越高（<code>通过info server可以查看run_id</code>）。</li></ul><h2 id="_2-5-redistemplate连接哨兵集群-选学" tabindex="-1"><a class="header-anchor" href="#_2-5-redistemplate连接哨兵集群-选学"><span>2.5.RedisTemplate连接哨兵集群（选学）</span></a></h2><p>分为三步：</p><ul><li>1）引入依赖</li><li>2）配置哨兵地址</li><li>3）配置读写分离</li></ul><h3 id="_2-5-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-5-1-引入依赖"><span>2.5.1.引入依赖</span></a></h3><p>就是SpringDataRedis的依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-2-配置哨兵地址" tabindex="-1"><a class="header-anchor" href="#_2-5-2-配置哨兵地址"><span>2.5.2.配置哨兵地址</span></a></h3><p>连接哨兵集群与传统单点模式不同，不再需要设置每一个redis的地址，而是直接指定哨兵地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    sentinel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">hmaster</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 集群名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 哨兵地址列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:27001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:27002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:27003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-3-配置读写分离" tabindex="-1"><a class="header-anchor" href="#_2-5-3-配置读写分离"><span>2.5.3.配置读写分离</span></a></h3><p>最后，还要配置读写分离，让java客户端将写请求发送到master节点，读请求发送到slave节点。定义一个bean即可：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LettuceClientConfigurationBuilderCustomizer</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> clientConfigurationBuilderCustomizer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> clientConfigurationBuilder </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clientConfigurationBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readFrom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ReadFrom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REPLICA_PREFERRED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个bean中配置的就是读写策略，包括四种：</p><ul><li><code>MASTER</code>：从主节点读取</li><li><code>MASTER_PREFERRED</code>：优先从<code>master</code>节点读取，<code>master</code>不可用才读取<code>slave</code></li><li><code>REPLICA</code>：从<code>slave</code>节点读取</li><li><code>REPLICA_PREFERRED</code>：优先从<code>slave</code>节点读取，所有的<code>slave</code>都不可用才读取<code>master</code></li></ul><h1 id="_3-redis分片集群" tabindex="-1"><a class="header-anchor" href="#_3-redis分片集群"><span>3.Redis分片集群</span></a></h1><p>主从模式可以解决高可用、高并发读的问题。但依然有两个问题没有解决：</p><ul><li>海量数据存储</li><li>高并发写</li></ul><p>要解决这两个问题就需要用到分片集群了。分片的意思，就是把数据拆分存储到不同节点，这样整个集群的存储数据量就更大了。</p><p>Redis分片集群的结构如图：</p><figure><img src="`+Y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>分片集群特征：</p><ul><li>集群中有多个master，每个master保存不同分片数据 ，解决海量数据存储问题</li><li>每个master都可以有多个slave节点 ，确保高可用</li><li>master之间通过ping监测彼此健康状态 ，类似哨兵作用</li><li>客户端请求可以访问集群任意节点，最终都会被转发到数据所在节点</li></ul><h2 id="_3-1-搭建分片集群" tabindex="-1"><a class="header-anchor" href="#_3-1-搭建分片集群"><span>3.1.搭建分片集群</span></a></h2><p>Redis分片集群最少也需要3个master节点，由于我们的机器性能有限，我们只给每个master配置1个slave，形成最小的分片集群：</p><figure><img src="'+U+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>计划部署的节点信息如下：</p><table><thead><tr><th><strong>容器名</strong></th><th><strong>角色</strong></th><th><strong>IP</strong></th><th><strong>映射端口</strong></th></tr></thead><tbody><tr><td>r1</td><td>master</td><td>192.168.200.146</td><td>7001</td></tr><tr><td>r2</td><td>master</td><td>192.168.200.146</td><td>7002</td></tr><tr><td>r3</td><td>master</td><td>192.168.200.146</td><td>7003</td></tr><tr><td>r4</td><td>slave</td><td>192.168.200.146</td><td>7004</td></tr><tr><td>r5</td><td>slave</td><td>192.168.200.146</td><td>7005</td></tr><tr><td>r6</td><td>slave</td><td>192.168.200.146</td><td>7006</td></tr></tbody></table><h3 id="_3-1-1-集群配置" tabindex="-1"><a class="header-anchor" href="#_3-1-1-集群配置"><span>3.1.1.集群配置</span></a></h3><p>分片集群中的Redis节点必须开启集群模式，一般在配置文件中添加下面参数：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster-enabled</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster-config-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster-node-timeout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendonly</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有3个我们没见过的参数：</p><ul><li><code>cluster-enabled</code>：是否开启集群模式</li><li><code>cluster-config-file</code>：集群模式的配置文件名称，无需手动创建，由集群自动维护</li><li><code>cluster-node-timeout</code>：集群中节点之间心跳超时时间</li></ul><p>一般搭建部署集群肯定是给每个节点都配置上述参数，不过考虑到我们计划用<code>docker-compose</code>部署，因此可以直接在启动命令中指定参数，偷个懒。</p><p>在虚拟机的<code>/root</code>目录下新建一个<code>redis-cluster</code>目录，然后在其中新建一个<code>docker-compose.yaml</code>文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-enabled&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-config-file&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7002&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-enabled&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-config-file&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7003&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-enabled&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-config-file&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7004&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-enabled&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-config-file&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r5</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7005&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-enabled&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-config-file&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  r6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r6</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    network_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--port&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7006&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-enabled&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--cluster-config-file&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：使用Docker部署Redis集群，network模式必须采用host</p><h3 id="_3-1-2-启动集群" tabindex="-1"><a class="header-anchor" href="#_3-1-2-启动集群"><span>3.1.2.启动集群</span></a></h3><p>进入<code>/root/redis-cluster</code>目录，使用命令启动redis：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动成功，可以通过命令查看启动进程：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 结果：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4822</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4743</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14:29</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:02</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:7002</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [cluster]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4827</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4745</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14:29</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:01</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:7005</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [cluster]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4897</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4778</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14:29</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:01</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:7004</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [cluster]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4903</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4759</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14:29</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:01</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:7006</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [cluster]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4905</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4775</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14:29</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:02</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:7001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [cluster]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4912</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4732</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 14:29</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:01</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:7003</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [cluster]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现每个redis节点都以cluster模式运行。不过节点与节点之间并未建立连接。</p><p>接下来，我们使用命令创建集群：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入任意节点容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 然后，执行命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster-replicas</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">192.168.200.146:7001 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:7002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.200.146:7003</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">192.168.200.146:7004 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:7005</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.200.146:7006</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令说明：</p><ul><li><p><code>redis-cli --cluster</code>：代表集群操作命令</p></li><li><p><code>create</code>：代表是创建集群</p></li><li><p><code>--cluster-replicas 1</code> ：指定集群中每个<code>master</code>的副本个数为1</p></li><li><ul><li>此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是<code>master</code>的数量<code>n</code>。因此节点列表中的前<code>n</code>个节点就是<code>master</code>，其它节点都是 <code>slave</code>节点，随机分配到不同<code>master</code></li></ul></li></ul><p>输入命令后控制台会弹出下面的信息：</p><figure><img src="`+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里展示了集群中<code>master</code>与<code>slave</code>节点分配情况，并询问你是否同意。节点信息如下：</p><ul><li><code>7001</code>是<code>master</code>，节点<code>id</code>后6位是<code>da134f</code></li><li><code>7002</code>是<code>master</code>，节点<code>id</code>后6位是<code>862fa0</code></li><li><code>7003</code>是<code>master</code>，节点<code>id</code>后6位是<code>ad5083</code></li><li><code>7004</code>是<code>slave</code>，节点<code>id</code>后6位是<code>391f8b</code>，认<code>ad5083</code>（7003）为<code>master</code></li><li><code>7005</code>是<code>slave</code>，节点<code>id</code>后6位是<code>e152cd</code>，认<code>da134f</code>（7001）为<code>master</code></li><li><code>7006</code>是<code>slave</code>，节点<code>id</code>后6位是<code>4a018a</code>，认<code>862fa0</code>（7002）为<code>master</code></li></ul><p>输入<code>yes</code>然后回车。会发现集群开始创建，并输出下列信息：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着，我们可以通过命令查看集群状态：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="'+P+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-2-散列插槽" tabindex="-1"><a class="header-anchor" href="#_3-2-散列插槽"><span>3.2.散列插槽</span></a></h2><p>数据要分片存储到不同的Redis节点，肯定需要有分片的依据，这样下次查询的时候才能知道去哪个节点查询。很多数据分片都会采用一致性hash算法。而Redis则是利用散列插槽（ <code>**hash slot**</code>）的方式实现数据分片。</p><p>详见官方文档：</p><p>https://redis.io/docs/management/scaling/#redis-cluster-101</p><p>在Redis集群中，共有16384个<code>hash slots</code>，集群中的每一个master节点都会分配一定数量的<code>hash slots</code>。具体的分配在集群创建时就已经指定了：</p><figure><img src="'+J+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如图中所示：</p><ul><li>Master[0]，本例中就是7001节点，分配到的插槽是0~5460</li><li>Master[1]，本例中就是7002节点，分配到的插槽是5461~10922</li><li>Master[2]，本例中就是7003节点，分配到的插槽是10923~16383</li></ul><p>当我们读写数据时，Redis基于<code>CRC16</code> 算法对<code>key</code>做<code>hash</code>运算，得到的结果与<code>16384</code>取余，就计算出了这个<code>key</code>的<code>slot</code>值。然后到 <code>slot</code>所在的Redis节点执行读写操作。</p><p>不过<code>hash slot</code>的计算也分两种情况：</p><ul><li>当<code>key</code>中包含<code>{}</code>时，根据<code>{}</code>之间的字符串计算<code>hash slot</code></li><li>当<code>key</code>中不包含<code>{}</code>时，则根据整个<code>key</code>字符串计算<code>hash slot</code></li></ul><p>例如：</p><ul><li>key是<code>user</code>，则根据<code>user</code>来计算hash slot</li><li>key是<code>user:{age}</code>，则根据<code>age</code>来计算hash slot</li></ul><p>我们来测试一下，先于<code>7001</code>建立连接：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入redis-cli</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 测试</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jack</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现报错了：</p><figure><img src="`+G+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>提示我们<code>MOVED 5474</code>，其实就是经过计算，得出<code>user</code>这个<code>key</code>的<code>hash slot</code> 是<code>5474</code>，而<code>5474</code>是在<code>7002</code>节点，不能在<code>7001</code>上写入！！</p><p>说好的任意节点都可以读写呢？</p><p>这是因为我们连接的方式有问题，连接集群时，要加<code>-c</code>参数：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 通过7001连接集群</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 存入数据</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jack</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><figure><img src="`+H+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，客户端自动跳转到了<code>5474</code>这个<code>slot</code>所在的<code>7002</code>节点。</p><p>现在，我们添加一个新的key，这次加上<code>{}</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 试一下key中带{}</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user:{age}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 再试一下key中不带{}</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> age</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><figure><img src="`+Z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到<code>user:{age}</code>和<code>age</code>计算出的<code>slot</code>都是<code>741</code>。</p><h2 id="_3-3-故障转移" tabindex="-1"><a class="header-anchor" href="#_3-3-故障转移"><span>3.3.故障转移</span></a></h2><p>分片集群的节点之间会互相通过ping的方式做心跳检测，超时未回应的节点会被标记为下线状态。当发现master下线时，会将这个master的某个slave提升为master。</p><p>我们先打开一个控制台窗口，利用命令监测集群状态：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">watch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令前面的watch可以每隔一段时间刷新执行结果，方便我们实时监控集群状态变化。</p><p>接着，我们故技重施，利用命令让某个master节点休眠。比如这里我们让<code>7002</code>节点休眠，打开一个新的ssh控制台，输入下面命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEBUG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以观察到，集群发现7002宕机，标记为下线：</p><figure><img src="'+W+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>过了一段时间后，7002原本的小弟7006变成了<code>master</code>：</p><figure><img src="'+M+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>而7002被标记为<code>slave</code>，而且其<code>master</code>正好是7006，主从地位互换。</p><h2 id="_3-4-总结" tabindex="-1"><a class="header-anchor" href="#_3-4-总结"><span>3.4.总结</span></a></h2><p>Redis分片集群如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>Redis计算key的插槽值时会判断key中是否包含<code>{}</code>，如果有则基于<code>{}</code>内的字符计算插槽</li><li>数据的key中可以加入<code>{类型}</code>，例如key都以<code>{typeId}</code>为前缀，这样同类型数据计算的插槽一定相同</li></ul><h2 id="_3-5-java客户端连接分片集群-选学" tabindex="-1"><a class="header-anchor" href="#_3-5-java客户端连接分片集群-选学"><span>3.5.Java客户端连接分片集群（选学）</span></a></h2><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致，参考<code>2.5节</code>：</p><p>1）引入redis的starter依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    cluster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:7001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:7002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:7003</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:8001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:8002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.200.146:8003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-redis数据结构" tabindex="-1"><a class="header-anchor" href="#_4-redis数据结构"><span>4.Redis数据结构</span></a></h1><p>我们常用的Redis数据类型有5种，分别是：</p><ul><li>String</li><li>List</li><li>Set</li><li>SortedSet</li><li>Hash</li></ul><p>还有一些高级数据类型，比如Bitmap、HyperLogLog、GEO等，其底层都是基于上述5种基本数据类型。因此在Redis的源码中，其实只有5种数据类型。</p><h2 id="_4-1-redisobject" tabindex="-1"><a class="header-anchor" href="#_4-1-redisobject"><span>4.1.RedisObject</span></a></h2><p>不管是任何一种数据类型，最终都会封装为RedisObject格式，它是一种结构体，C语言中的一种结构，可以理解为Java中的类。</p><p>结构大概是这样的：</p><figure><img src="`+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到整个结构体中并不包含真实的数据，仅仅是对象头信息，内存占用的大小为4+4+24+32+64 = 128bit</p><p>也就是16字节，然后指针<code>ptr</code>指针指向的才是真实数据存储的内存地址。所以RedisObject的内存开销是很大的。</p><p>属性中的<code>encoding</code>就是当前对象底层采用的<strong>数据结构</strong>或<strong>编码方式</strong>，可选的有11种之多：</p><table><thead><tr><th><strong>编号</strong></th><th><strong>编码方式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>0</td><td>OBJ_ENCODING_RAW</td><td>raw编码动态字符串</td></tr><tr><td>1</td><td>OBJ_ENCODING_INT</td><td>long类型的整数的字符串</td></tr><tr><td>2</td><td>OBJ_ENCODING_HT</td><td>hash表（也叫dict）</td></tr><tr><td>3</td><td>OBJ_ENCODING_ZIPMAP</td><td>已废弃</td></tr><tr><td>4</td><td>OBJ_ENCODING_LINKEDLIST</td><td>双端链表</td></tr><tr><td>5</td><td>OBJ_ENCODING_ZIPLIST</td><td>压缩列表</td></tr><tr><td>6</td><td>OBJ_ENCODING_INTSET</td><td>整数集合</td></tr><tr><td>7</td><td>OBJ_ENCODING_SKIPLIST</td><td>跳表</td></tr><tr><td>8</td><td>OBJ_ENCODING_EMBSTR</td><td>embstr编码的动态字符串</td></tr><tr><td>9</td><td>OBJ_ENCODING_QUICKLIST</td><td>快速列表</td></tr><tr><td>10</td><td>OBJ_ENCODING_STREAM</td><td>Stream流</td></tr><tr><td>11</td><td>OBJ_ENCODING_LISTPACK</td><td>紧凑列表</td></tr></tbody></table><p>Redis中的5种不同的数据类型采用的底层数据结构和编码方式如下：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>编码方式</strong></th></tr></thead><tbody><tr><td>STRING</td><td><code>int</code>、<code>embstr</code>、<code>raw</code></td></tr><tr><td>LIST</td><td><code>LinkedList和ZipList</code>(3.2以前)、<code>QuickList</code>（3.2以后）</td></tr><tr><td>SET</td><td><code>intset</code>、<code>HT</code></td></tr><tr><td>ZSET</td><td><code>ZipList</code>（7.0以前）、<code>Listpack</code>（7.0以后）、<code>HT</code>、<code>SkipList</code></td></tr><tr><td>HASH</td><td><code>ZipList</code>（7.0以前）、<code>Listpack</code>（7.0以后）、<code>HT</code></td></tr></tbody></table><p>这些数据类型比较复杂，我们<strong>重点讲解几个面试会问</strong>的，其它的大家可以查看黑马程序员发布的Redis专业课程：</p><p>https://player.bilibili.com/player.html?bvid=BV1cr4y1671t&amp;p=145&amp;page=145&amp;autoplay=0</p><h2 id="_4-2-skiplist" tabindex="-1"><a class="header-anchor" href="#_4-2-skiplist"><span>4.2.SkipList</span></a></h2><p>SkipList（跳表）首先是链表，但与传统链表相比有几点差异：</p><ul><li>元素按照升序排列存储</li><li>节点可能包含多个指针，指针跨度不同。</li></ul><p>传统链表只有指向前后元素的指针，因此只能顺序依次访问。如果查找的元素在链表中间，查询的效率会比较低。而SkipList则不同，它内部包含跨度不同的多级指针，可以让我们跳跃查找链表中间的元素，效率非常高。</p><p>其结构如图：</p><figure><img src="'+V+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们可以看到1号元素就有指向3、5、10的多个指针，查询时就可以跳跃查找。例如我们要找大小为14的元素，查找的流程是这样的：</p><figure><img src="'+X+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>首先找元素1节点最高级指针，也就是4级指针，起始元素大小为1，指针跨度为9，可以判断出目标元素大小为10。由于14比10大，肯定要从10这个元素向下接着找。</li><li>找到10这个元素，发现10这个元素的最高级指针跨度为5，判断出目标元素大小为15，大于14，需要判断下级指针</li><li>10这个元素的2级指针跨度为3，判断出目标元素为13，小于14，因此要基于元素13接着找</li><li>13这个元素最高级级指针跨度为2，判断出目标元素为15，比14大，需要判断下级指针。</li><li>13的下级指针跨度为1，因此目标元素是14，刚好于目标一致，找到。</li></ul><p>这种多级指针的查询方式就避免了传统链表的逐个遍历导致的查询效率下降问题。在对有序数据做随机查询和排序时效率非常高。</p><p>跳表的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplist {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 头尾节点指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">header, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tail;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 节点数量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> length;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 最大的索引层级</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> level;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} zskiplist;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到SkipList主要属性是header和tail，也就是头尾指针，因此它是支持双向遍历的。</p><p>跳表中节点的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sds ele;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 节点存储的字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 节点分数，排序、查找用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">backward;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 前一个节点指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistLevel {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zskiplistNode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">forward;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 下一个节点指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> span;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 索引跨度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 多级索引数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} zskiplistNode;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个节点中都包含ele和score两个属性，其中score是得分，也就是节点排序的依据。ele则是节点存储的字符串数据指针。</p><p>其内存结构如下：</p><figure><img src="`+Q+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-3-sortedset" tabindex="-1"><a class="header-anchor" href="#_4-3-sortedset"><span>4.3.SortedSet</span></a></h2><p><strong>面试题</strong>：Redis的<code>SortedSet</code>底层的数据结构是怎样的？</p><p><strong>答</strong>：SortedSet是有序集合，底层的存储的每个数据都包含element和score两个值。score是得分，element则是字符串值。SortedSet会根据每个element的score值排序，形成有序集合。</p><p>它支持的操作很多，比如：</p><ul><li>根据element查询score值</li><li>按照score值升序或降序查询element</li></ul><p>要实现根据element查询对应的score值，就必须实现element与score之间的键值映射。SortedSet底层是基于<strong>HashTable</strong>来实现的。</p><p>要实现对score值排序，并且查询效率还高，就需要有一种高效的有序数据结构，SortedSet是基于<strong>跳表</strong>实现的。</p><p>加分项：因为SortedSet底层需要用到两种数据结构，对内存占用比较高。因此Redis底层会对SortedSet中的元素大小做判断。如果* <em>元素大小小于128<strong>且</strong>每个元素都小于64字节</em>*，SortedSet底层会采用<strong>ZipList</strong>，也就是<strong>压缩列</strong>表来代替<strong>HashTable</strong>和* <em>SkipList</em>*</p><p>不过，<code>ZipList</code>存在连锁更新问题，因此而在Redis7.0版本以后，<code>ZipList</code>又被替换为<strong>Listpack</strong>（紧凑列表）。</p><p>Redis源码中<code>zset</code>，也就是<code>SortedSet</code>的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zset {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dict;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // dict，底层就是HashTable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    zskiplist </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">zsl;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 跳表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} zset;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其内存结构如图：</p><figure><img src="`+$+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_5-redis内存回收" tabindex="-1"><a class="header-anchor" href="#_5-redis内存回收"><span>5.Redis内存回收</span></a></h1><p>Redis之所以性能强，最主要的原因就是基于内存存储。然而单节点的Redis其内存大小不宜过大，会影响持久化或主从同步性能。</p><p>我们可以通过修改redis.conf文件，添加下面的配置来配置Redis的最大内存：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">maxmemory</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当内存达到上限，就无法存储更多数据了。因此，Redis内部会有两套内存回收的策略：</p><ul><li>内存过期策略</li><li>内存淘汰策略</li></ul><h2 id="_5-1-内存过期处理" tabindex="-1"><a class="header-anchor" href="#_5-1-内存过期处理"><span>5.1.内存过期处理</span></a></h2><p>存入Redis中的数据可以配置过期时间，到期后再次访问会发现这些数据都不存在了，也就是被过期清理了。</p><h3 id="_5-1-1-过期命令" tabindex="-1"><a class="header-anchor" href="#_5-1-1-过期命令"><span>5.1.1.过期命令</span></a></h3><p>Redis中通过<code>expire</code>命令可以给KEY设置<code>TTL</code>（过期时间），例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 写入一条数据</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 设置20秒过期时间</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expire</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过set命令本身也可以支持过期时间的设置：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 写入一条数据并设置20s过期时间</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EX</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当过期时间到了以后，再去查询数据，会发现数据已经不存在。</p><h3 id="_5-1-2-过期策略" tabindex="-1"><a class="header-anchor" href="#_5-1-2-过期策略"><span>5.1.2.过期策略</span></a></h3><p>那么问题来了：</p><ul><li>Redis如何判断一个KEY是否过期呢？</li><li>Redis又是何时删除过期KEY的呢？</li></ul><p>Redis不管有多少种数据类型，本质是一个<code>KEY-VALUE</code>的键值型数据库，而这种键值映射底层正式基于HashTable来实现的，在Redis中叫做Dict.</p><p>来看下RedisDB的底层源码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> redisDb {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dict;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                 /* The keyspace for this DB , 也就是存放KEY和VALUE的哈希表*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">expires;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">              /* 同样是哈希表，但保存的是设置了TTL的KEY，及其到期时间*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">blocking_keys;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        /* Keys with clients waiting for data (BLPOP)*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ready_keys;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">           /* Blocked keys that received a PUSH */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">watched_keys;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">         /* WATCHED keys for MULTI/EXEC CAS */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                     /* Database ID, 0 ~ 15 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> avg_ttl;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">          /* Average TTL, just for stats */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expires_cursor;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> /* Cursor of the active expire cycle. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    list </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">defrag_later;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">         /* List of key names to attempt to defrag one by one, gradually. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} redisDb;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在回答第一个问题：</p><p><strong>面试题</strong>：Redis如何判断KEY是否过期呢？</p><p><strong>答</strong>：在Redis中会有两个Dict，也就是HashTable，其中一个记录KEY-VALUE键值对，另一个记录KEY和过期时间。要判断一个KEY是否过期，只需要到记录过期时间的Dict中根据KEY查询即可。</p><p>Redis是何时删除过期KEY的呢？</p><p>Redis并不会在KEY过期时立刻删除KEY，因为要实现这样的效果就必须给每一个过期的KEY设置时钟，并监控这些KEY的过期状态。无论对CPU还是内存都会带来极大的负担。</p><p>Redis的过期KEY删除策略有两种：</p><ul><li>惰性删除</li><li>周期删除</li></ul><p><strong>惰性删除</strong>，顾明思议就是过期后不会立刻删除。那在什么时候删除呢？</p><p>Redis会在每次访问KEY的时候判断当前KEY有没有设置过期时间，如果有，过期时间是否已经到期。对应的源码如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// db.c</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 寻找要执行写操作的key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">robj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lookupKeyWriteWithFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">redisDb </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> robj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> flags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 检查key是否过期，如果过期则删除</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expireIfNeeded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(db,key);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lookupKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(db,key,flags);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 寻找要执行读操作的key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">robj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lookupKeyReadWithFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">redisDb </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> robj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> flags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    robj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">val;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 检查key是否过期，如果过期则删除</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expireIfNeeded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(db,key) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 略 ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lookupKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(db,key,flags);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> keymiss;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stat_keyspace_hits</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>周期删除</strong>：顾明思议是通过一个定时任务，周期性的抽样部分过期的key，然后执行删除。</p><p>执行周期有两种：</p><ul><li>**SLOW模式：**Redis会设置一个定时任务<code>serverCron()</code>，按照<code>server.hz</code>的频率来执行过期key清理</li><li>**FAST模式：**Redis的每个事件循环前执行过期key清理（事件循环就是NIO事件处理的循环）。</li></ul><p><strong>SLOW</strong>模式规则：</p><ul><li>① 执行频率受<code>server.hz</code>影响，默认为10，即每秒执行10次，每个执行周期100ms。</li><li>② 执行清理耗时不超过一次执行周期的25%，即25ms.</li><li>③ 逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>④ 如果没达到时间上限（25ms）并且过期key比例大于10%，再进行一次抽样，否则结束</li></ul><p><strong>FAST</strong>模式规则（过期key比例小于10%不执行）：</p><ul><li>① 执行频率受<code>beforeSleep()</code>调用频率影响，但两次FAST模式间隔不低于2ms</li><li>② 执行清理耗时不超过1ms</li><li>③ 逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>④ 如果没达到时间上限（1ms）并且过期key比例大于10%，再进行一次抽样，否则结束</li></ul><h2 id="_5-2-内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#_5-2-内存淘汰策略"><span>5.2.内存淘汰策略</span></a></h2><p>对于某些特别依赖于Redis的项目而言，仅仅依靠过期KEY清理是不够的，内存可能很快就达到上限。因此Redis允许设置内存告警阈值，当内存使用达到阈值时就会主动挑选部分KEY删除以释放更多内存。这叫做 <strong>内存淘汰</strong>机制。</p><h3 id="_5-2-1-内存淘汰时机" tabindex="-1"><a class="header-anchor" href="#_5-2-1-内存淘汰时机"><span>5.2.1.内存淘汰时机</span></a></h3><p>那么问题来了，当内存达到阈值时执行内存淘汰，但问题是Redis什么时候会执去判断内存是否达到预警呢？</p><p>Redis每次执行任何命令时，都会判断内存是否达到阈值：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// server.c中处理命令的部分源码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">client </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // ... 略</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">maxmemory</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lua_timedout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 调用performEvictions()方法尝试进行内存淘汰</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> out_of_memory </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">performEvictions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EVICT_FAIL);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // ... 略</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (out_of_memory </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reject_cmd_on_oom) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 如果内存依然不足，直接拒绝命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            rejectCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">oomerr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> C_OK;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-2-淘汰策略" tabindex="-1"><a class="header-anchor" href="#_5-2-2-淘汰策略"><span>5.2.2.淘汰策略</span></a></h3><p>好了，知道什么时候尝试淘汰了，那具体Redis是如何判断该淘汰哪些<code>Key</code>的呢？</p><p>Redis支持8种不同的内存淘汰策略：</p><ul><li><code>noeviction</code>： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。</li><li><code>volatile-ttl</code>： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li><code>allkeys-random</code>：对全体key ，随机进行淘汰。也就是直接从db-&gt;dict中随机挑选</li><li><code>volatile-random</code>：对设置了TTL的key ，随机进行淘汰。也就是从db-&gt;expires中随机挑选。</li><li><code>allkeys-lru</code>： 对全体key，基于LRU算法进行淘汰</li><li><code>volatile-lru</code>： 对设置了TTL的key，基于LRU算法进行淘汰</li><li><code>allkeys-lfu</code>： 对全体key，基于LFU算法进行淘汰</li><li><code>volatile-lfu</code>： 对设置了TTL的key，基于LFI算法进行淘汰</li></ul><p>比较容易混淆的有两个算法：</p><ul><li><strong>LRU</strong>（<code>**L**east **R**ecently **U**sed</code>），最近最久未使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</li><li><strong>LFU</strong>（<code>**L**east **F**requently **U**sed</code>），最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。</li></ul><p>Redis怎么知道某个KEY的<code>最近一次访问时间</code>或者是<code>访问频率</code>呢？</p><p>还记不记得之前讲过的RedisObject的结构？</p><p>回忆一下：</p><figure><img src="`+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中的<code>lru</code>就是记录最近一次访问时间和访问频率的。当然，你选择<code>LRU</code>和<code>LFU</code>时的记录方式不同：</p><ul><li><strong>LRU</strong>：以秒为单位记录最近一次访问时间，长度24bit</li><li><strong>LFU</strong>：高16位以分钟为单位记录最近一次访问时间，低8位记录逻辑访问次数</li></ul><p>时间就不说了，那么逻辑访问次数又是怎么回事呢？8位无符号数字最大才255，访问次数超过255怎么办？</p><p>这就要聊起Redis的<strong>逻辑访问次数</strong>算法了，LFU的访问次数之所以叫做<strong>逻辑访问次数</strong>，是因为并不是每次key被访问都计数，而是通过运算：</p><ul><li>① 生成<code>[0,1)</code>之间的随机数<code>R</code></li><li>② 计算 <code>1/(旧次数 * lfu_log_factor + 1)</code>，记录为<code>P</code>， <code>lfu_log_factor</code>默认为10</li><li>③ 如果 <code>R</code> &lt; <code>P </code>，则计数器 <code>+1</code>，且最大不超过255</li><li>④ 访问次数会随时间衰减，距离上一次访问时间每隔 <code>lfu_decay_time</code> 分钟(默认1) ，计数器<code>-1</code></li></ul><p>显然LFU的基于访问频率的统计更符合我们的淘汰目标，因此<strong>官方推荐使用LFU算法。</strong></p><p>算法我们弄明白了，不过这里大家要注意一下：Redis中的<code>KEY</code>可能有数百万甚至更多，每个KEY都有自己访问时间或者逻辑访问次数。我们要找出时间最早的或者访问次数最小的，难道要把Redis中 <strong>所有数据排序</strong>？</p><p>要知道Redis的内存淘汰是在每次执行命令时处理的。如果每次执行命令都先对全量数据做内存排序，那命令的执行时长肯定会非常长，这是不现实的。</p><p>所以Redis采取的是<strong>抽样法</strong>，即每次抽样一定数量（<code>maxmemory_smples</code>）的key，然后基于内存策略做排序，找出淘汰优先级最高的，删除这个key。这就导致Redis的算法并不是真正的 <strong>LRU</strong>，而是一种基于抽样的<strong>近似LRU算法</strong>。</p><p>不过，在Redis3.0以后改进了这个算法，引入了一个淘汰候选池，抽样的key要与候选池中的key比较淘汰优先级，优先级更高的才会被放入候选池。然后在候选池中找出优先级最高的淘汰掉，这就使算法的结果更接近与真正的LRU算法了。特别是在抽样值较高的情况下（例如10），可以达到与真正的LRU接近的效果。</p><p>这也是官方给出的真正LRU与近似LRU的结果对比：</p><figure><img src="'+ii+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你可以在图表中看到三种颜色的点形成三个不同的带，每个点就是一个加入的<code>KEY</code>。</p><ul><li>浅灰色带是被驱逐的对象</li><li>灰色带是没有被驱逐的对象</li><li>绿色带是被添加的对象</li></ul><h2 id="_5-3-总结" tabindex="-1"><a class="header-anchor" href="#_5-3-总结"><span>5.3.总结</span></a></h2><p><strong>面试题</strong>：<strong>Redis如何判断KEY是否过期呢？</strong></p><p><strong>答</strong>：在Redis中会有两个Dict，也就是HashTable，其中一个记录KEY-VALUE键值对，另一个记录KEY和过期时间。要判断一个KEY是否过期，只需要到记录过期时间的Dict中根据KEY查询即可。</p><p><strong>面试题</strong>：<strong>Redis何时删除过期KEY？如何删除？</strong></p><p><strong>答</strong>：Redis的过期KEY处理有两种策略，分别是惰性删除和周期删除。</p><p>惰性删除是指在每次用户访问某个KEY时，判断KEY的过期时间：如果过期则删除；如果未过期则忽略。</p><p>周期删除有两种模式：</p><ul><li><strong>SLOW</strong>模式：通过一个定时任务，定期的抽样部分带有TTL的KEY，判断其是否过期。默认情况下定时任务的执行频率是每秒10次，但每次执行不能超过25毫秒。如果执行抽样后发现时间还有剩余，并且过期KEY的比例较高，则会多次抽样。</li><li><strong>FAST</strong>模式：在Redis每次处理NIO事件之前，都会抽样部分带有TTL的KEY，判断是否过期，因此执行频率较高。但是每次执行时长不能超过1ms，如果时间充足并且过期KEY比例过高，也会多次抽样</li></ul><p><strong>面试题</strong>：<strong>当Redis内存不足是会怎么做</strong>？</p><p><strong>答</strong>：这取决于配置的内存淘汰策略，Redis支持很多种内存淘汰策略，例如LRU、LFU、Random. 但默认的策略是直接拒绝新的写入请求。而如果设置了其它策略，则会在每次执行命令后判断占用内存是否达到阈值。如果达到阈值则会基于配置的淘汰策略尝试进行内存淘汰，直到占用内存小于阈值为止。</p><p><strong>面试题</strong>：<strong>那你能聊聊LRU和LFU吗</strong>？</p><p><strong>答</strong>：<code>LRU</code>是最近最久未使用。Redis的Key都是RedisObject，当启用LRU算法后，Redis会在Key的头信息中使用24个bit记录每个key的最近一次使用的时间 <code>lru</code>。每次需要内存淘汰时，就会抽样一部分KEY，找出其中空闲时间最长的，也就是<code>now - lru</code>结果最大的，然后将其删除。如果内存依然不足，就重复这个过程。</p><p>由于采用了抽样来计算，这种算法只能说是一种近似LRU算法。因此在Redis4.0以后又引入了<code>LFU</code> 算法，这种算法是统计最近最少使用，也就是按key的访问频率来统计。当启用LFU算法后，Redis会在key的头信息中使用24bit记录最近一次使用时间和逻辑访问频率。其中高16位是以分钟为单位的最近访问时间，后8位是逻辑访问次数。与LFU类似，每次需要内存淘汰时，就会抽样一部分KEY，找出其中逻辑访问次数最小的，将其淘汰。</p><p><strong>面试题</strong>：<strong>逻辑访问次数是如何计算的</strong>？</p><p><strong>答</strong>：由于记录访问次数的只有<code>8bit</code>，即便是无符号数，最大值只有255，不可能记录真实的访问次数。因此Redis统计的其实是逻辑访问次数。这其中有一个计算公式，会根据当前的访问次数做计算，结果要么是次数 <code>+1</code>，要么是次数不变。但随着当前访问次数越大，<code>+1</code>的概率也会越低，并且最大值不超过255.</p><p>除此以外，逻辑访问次数还有一个衰减周期，默认为1分钟，即每隔1分钟逻辑访问次数会<code>-1</code>。这样逻辑访问次数就能基本反映出一个<code>key</code> 的访问热度了。</p><h1 id="_6-缓存问题" tabindex="-1"><a class="header-anchor" href="#_6-缓存问题"><span>6.缓存问题</span></a></h1><p>Redis经常被用作缓存，而缓存在使用的过程中存在很多问题需要解决。例如：</p><ul><li>缓存的数据一致性问题</li><li>缓存击穿</li><li>缓存穿透</li><li>缓存雪崩</li></ul><h2 id="_6-1-缓存一致性" tabindex="-1"><a class="header-anchor" href="#_6-1-缓存一致性"><span>6.1.缓存一致性</span></a></h2><p>我们先看下目前企业用的最多的缓存模型。缓存的通用模型有三种：</p><ul><li><p><code>Cache Aside</code>：有缓存调用者自己维护数据库与缓存的一致性。即：</p></li><li><ul><li>查询时：命中则直接返回，未命中则查询数据库并写入缓存</li><li>更新时：更新数据库并删除缓存，查询时自然会更新缓存</li></ul></li><li><p><code>Read/Write Through</code>：数据库自己维护一份缓存，底层实现对调用者透明。底层实现：</p></li><li><ul><li>查询时：命中则直接返回，未命中则查询数据库并写入缓存</li><li>更新时：判断缓存是否存在，不存在直接更新数据库。存在则更新缓存，同步更新数据库</li></ul></li><li><p><code>Write Behind Cahing</code>：读写操作都直接操作缓存，由线程异步的将缓存数据同步到数据库</p></li></ul><p>目前企业中使用最多的就是<code>Cache Aside</code>模式，因为实现起来非常简单。但缺点也很明显，就是无法保证数据库与缓存的强一致性。为什么呢？我们一起来分析一下。</p><p><code>Cache Aside</code>的写操作是要在更新数据库的同时删除缓存，那为什么不选择更新数据库的同时更新缓存，而是删除呢？</p><p>原因很简单，假如一段时间内无人查询，但是有多次更新，那这些更新都属于无效更新。采用删除方案也就是延迟更新，什么时候有人查询了，什么时候更新。</p><p>那到底是先更新数据库再删除缓存，还是先删除缓存再更新数据库呢？</p><p>现在假设有两个线程，一个来更新数据，一个来查询数据。我们分别分析两种策略的表现。</p><p>我们先分析策略1，先更新数据库再删除缓存：</p><p><strong>正常情况</strong></p><figure><img src="'+si+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>异常情况</strong></p><figure><img src="'+ai+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>异常情况说明：</p><ul><li>线程1删除缓存后，还没来得及更新数据库，</li><li>此时线程2来查询，发现缓存未命中，于是查询数据库，写入缓存。由于此时数据库尚未更新，查询的是旧数据。也就是说刚才的删除白删了，缓存又变成旧数据了。</li><li>然后线程1更新数据库，此时数据库是新数据，缓存是旧数据</li></ul><p>由于更新数据库的操作本身比较耗时，在期间有线程来查询数据库并更新缓存的概率非常高。因此不推荐这种方案。</p><p>再来看策略2，先更新数据库再删除缓存：</p><p><strong>正常情况</strong></p><figure><img src="'+ei+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>异常情况</strong></p><figure><img src="'+li+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>异常情况说明：</p><ul><li>线程1查询缓存未命中，于是去查询数据库，查询到旧数据</li><li>线程1将数据写入缓存之前，线程2来了，更新数据库，删除缓存</li><li>线程1执行写入缓存的操作，写入旧数据</li></ul><p>可以发现，异常状态发生的概率极为苛刻，线程1必须是查询数据库已经完成，但是缓存尚未写入之前。线程2要完成更新数据库同时删除缓存的两个操作。要知道线程1执行写缓存的速度在毫秒之间，速度非常快，在这么短的时间要完成数据库和缓存的操作，概率非常之低。</p><p><strong>综上</strong>，添加缓存的目的是为了提高系统性能，而你要付出的代价就是缓存与数据库的强一致性。如果你要求数据库与缓存的强一致，那就需要加锁避免并行读写。但这就降低了性能，与缓存的目标背道而驰。</p><p>因此不管任何缓存同步方案最终的目的都是尽可能保证最终一致性，降低发生不一致的概率。我们采用先更新数据库再删除缓存的方案，已经将这种概率降到足够低，目的已经达到了。</p><p>同时我们还要给缓存加上过期时间，一旦发生缓存不一致，当缓存过期后会重新加载，数据最终还是能保证一致。这就可以作为一个兜底方案。</p><h2 id="_6-2-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_6-2-缓存穿透"><span>6.2.缓存穿透</span></a></h2><p>什么是缓存穿透呢？</p><p>我们知道，当请求查询缓存未命中时，需要查询数据库以加载缓存。但是大家思考一下这样的场景：</p><p>如果我访问一个数据库中也不存在的数据。会出现什么现象？</p><p>由于数据库中不存在该数据，那么缓存中肯定也不存在。因此不管请求该数据多少次，缓存永远不可能建立，请求永远会直达数据库。</p><p>假如有不怀好意的人，开启很多线程频繁的访问一个数据库中也不存在的数据。由于缓存不可能生效，那么所有的请求都访问数据库，可能就会导致数据库因过高的压力而宕机。</p><p>解决这个问题有两种思路：</p><ul><li>缓存空值</li><li>布隆过滤器</li></ul><h3 id="_6-2-1-缓存空值" tabindex="-1"><a class="header-anchor" href="#_6-2-1-缓存空值"><span>6.2.1.缓存空值</span></a></h3><p>简单来说，就是当我们发现请求的数据即不存在与缓存，也不存在与数据库时，将空值缓存到Redis，避免频繁查询数据库。实现思路如下：</p><figure><img src="'+ni+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>优点：</p><ul><li>实现简单，维护方便</li></ul><p>缺点：</p><ul><li>额外的内存消耗</li></ul><h3 id="_6-2-2-布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_6-2-2-布隆过滤器"><span>6.2.2.布隆过滤器</span></a></h3><p>布隆过滤是一种数据统计的算法，用于检索一个元素是否存在一个集合中。</p><p>一般我们判断集合中是否存在元素，都会先把元素保存到类似于树、哈希表等数据结构中，然后利用这些结构查询效率高的特点来快速匹配判断。但是随着元素数量越来越多，这种模式对内存的占用也越来越大，检索的速度也会越来越慢。而布隆过滤的内存占用小，查询效率却很高。</p><p>布隆过滤首先需要一个很长的bit数组，默认数组中每一位都是0.</p><figure><img src="'+ti+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后还需要<code>K</code>个<code>hash</code>函数，将元素基于这些hash函数做运算的结果映射到bit数组的不同位置，并将这些位置置为1，例如现在k=3：</p><ul><li><code>hello</code>经过运算得到3个角标：1、5、12</li><li><code>world</code>经过运算得到3个角标：8、17、21</li><li><code>java</code>经过运算得到3个角标：17、25、28</li></ul><p>则需要将每个元素对应角标位置置为1：</p><figure><img src="'+di+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，我们要判断元素是否存在，只需要再次基于<code>K</code>个<code>hash</code>函数做运算， 得到<code>K</code>个角标，判断每个角标的位置是不是1：</p><ul><li>只要全是1，就证明元素存在</li><li>任意位置为0，就证明元素一定不存在</li></ul><p>假如某个元素本身并不存在，也没添加到布隆过滤器过。但是由于存在hash碰撞的可能性，这就会出现这个元素计算出的角标已经被其它元素置为1的情况。那么这个元素也会被误判为已经存在。</p><p>因此，布隆过滤器的判断存在误差：</p><ul><li>当布隆过滤器认为元素不存在时，它<strong>肯定不存在</strong></li><li>当布隆过滤器认为元素存在时，它<strong>可能存在，也可能不存在</strong></li></ul><p>当<code>bit</code>数组越大、<code>Hash</code>函数<code>K</code>越复杂，<code>K</code>越大时，这个误判的概率也就越低。由于采用<code>bit</code>数组来标示数据，即便<code>4,294,967,296</code>个 <code>bit</code>位，也只占<code>512mb</code>的空间</p><p>我们可以把数据库中的数据利用布隆过滤器标记出来，当用户请求缓存未命中时，先基于布隆过滤器判断。如果不存在则直接拒绝请求，存在则去查询数据库。尽管布隆过滤存在误差，但一般都在0.01%左右，可以大大减少数据库压力。</p><p>使用布隆过滤后的流程如下：</p><figure><img src="'+hi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_6-3-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_6-3-缓存雪崩"><span>6.3.缓存雪崩</span></a></h2><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><figure><img src="'+pi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>常见的解决方案有：</p><ul><li>给不同的Key的TTL添加随机值，这样KEY的过期时间不同，不会大量KEY同时过期</li><li>利用Redis集群提高服务的可用性，避免缓存服务宕机</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存，比如先查询本地缓存，本地缓存未命中再查询Redis，Redis未命中再查询数据库。即便Redis宕机，也还有本地缓存可以抗压力</li></ul><h2 id="_6-4-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_6-4-缓存击穿"><span>6.4.缓存击穿</span></a></h2><p><strong>缓存击穿</strong>问题也叫<strong>热点Key</strong>问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>由于我们采用的是<code>Cache Aside</code> 模式，当缓存失效时需要下次查询时才会更新缓存。当某个key缓存失效时，如果这个key是热点key，并发访问量比较高。就会在一瞬间涌入大量请求，都发现缓存未命中，于是都会去查询数据库，尝试重建缓存。可能一瞬间就把数据库压垮了。</p><figure><img src="'+ki+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图所示：</p><ul><li>线程1发现缓存未命中，准备查询数据库，重建缓存，但是因为数据比较复杂，导致查询数据库耗时较久</li><li>在这个过程中，一下次来了3个新的线程，就都会发现缓存未命中，都去查询数据库</li><li>数据库压力激增</li></ul><p>常见的解决方案有两种：</p><ul><li>互斥锁：给重建缓存逻辑加锁，避免多线程同时指向</li><li>逻辑过期：热点key不要设置过期时间，在活动结束后手动删除。</li></ul><p>基于互斥锁的方案如图：</p><figure><img src="'+ri+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>逻辑过期的思路如图：</p><figure><img src="'+ci+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_6-5-面试总结" tabindex="-1"><a class="header-anchor" href="#_6-5-面试总结"><span>6.5.面试总结</span></a></h2><p><strong>面试题</strong>：<strong>如何保证缓存的双写一致性</strong>？</p><p><strong>答</strong>：缓存的双写一致性很难保证强一致，只能尽可能降低不一致的概率，确保最终一致。我们项目中采用的是<code>Cache Aside</code> 模式。简单来说，就是在更新数据库之后删除缓存；在查询时先查询缓存，如果未命中则查询数据库并写入缓存。同时我们会给缓存设置过期时间作为兜底方案，如果真的出现了不一致的情况，也可以通过缓存过期来保证最终一致。</p><p><strong>追问</strong>：为什么不采用延迟双删机制？</p><p><strong>答</strong> ：延迟双删的第一次删除并没有实际意义，第二次采用延迟删除主要是解决数据库主从同步的延迟问题，我认为这是数据库主从的一致性问题，与缓存同步无关。既然主节点数据已经更新，Redis的缓存理应更新。而且延迟双删会增加缓存业务复杂度，也没能完全避免缓存一致性问题，投入回报比太低。</p><p><strong>面试题</strong>：<strong>如何解决缓存穿透问题</strong>？</p><p><strong>答</strong>：缓存穿透也可以说是穿透攻击，具体来说是因为请求访问到了数据库不存在的值，这样缓存无法命中，必然访问数据库。如果高并发的访问这样的接口，会给数据库带来巨大压力。</p><p>我们项目中都是基于布隆过滤器来解决缓存穿透问题的，当缓存未命中时基于布隆过滤器判断数据是否存在。如果不存在则不去访问数据库。</p><p>当然，也可以使用缓存空值的方式解决，不过这种方案比较浪费内存。</p><p><strong>面试题</strong>：<strong>如何解决缓存雪崩问题</strong>？</p><p><strong>答</strong>：缓存雪崩的常见原因有两个，第一是因为大量key同时过期。针对问这个题我们可以可以给缓存key设置不同的TTL值，避免key同时过期。</p><p>第二个原因是Redis宕机导致缓存不可用。针对这个问题我们可以利用集群提高Redis的可用性。也可以添加多级缓存，当Redis宕机时还有本地缓存可用。</p><p><strong>面试题</strong>：<strong>如何解决缓存击穿问题</strong>？</p><p><strong>答</strong>：缓存击穿往往是由热点Key引起的，当热点Key过期时，大量请求涌入同时查询，发现缓存未命中都会去访问数据库，导致数据库压力激增。解决这个问题的主要思路就是避免多线程并发去重建缓存，因此方案有两种。</p><p>第一种是基于互斥锁，当发现缓存未命中时需要先获取互斥锁，再重建缓存，缓存重建完成释放锁。这样就可以保证缓存重建同一时刻只会有一个线程执行。不过这种做法会导致缓存重建时性能下降严重。</p><p>第二种是基于逻辑过期，也就是不给热点Key设置过期时间，而是给数据添加一个过期时间的字段。这样热点Key就不会过期，缓存中永远有数据。</p><p>查询到数据时基于其中的过期时间判断key是否过期，如果过期开启独立新线程异步的重建缓存，而查询请求先返回旧数据即可。当然，这个过程也要加互斥锁，但由于重建缓存是异步的，而且获取锁失败也无需等待，而是返回旧数据，这样性能几乎不受影响。</p><p>需要注意的是，无论是采用哪种方式，在获取互斥锁后一定要再次判断缓存是否命中，做dubbo check. 因为当你获取锁成功时，可能是在你之前有其它线程已经重建缓存了。</p><p><strong>面试题</strong>：<strong>redis 是单线程还是多线程?</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>3.x 版本 单线程</span></span>
<span class="line"><span>4.0 引入了多线程的命令 ,比如 unlink 删除, 异步删除数据,防止命令阻塞 (del)</span></span>
<span class="line"><span>6.0 redis命令 执行分三个过程 解析命令(多线程) ,执行命令(单) 返回结果(多线程)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,574),Ai=[gi];function yi(ui,mi){return e(),a("div",null,Ai)}const Bi=s(oi,[["render",yi],["__file","Redis高级.html.vue"]]),Fi=JSON.parse('{"path":"/demo/back-ends/Java%E8%BF%9B%E9%98%B6/Redis/Redis%E9%AB%98%E7%BA%A7.html","title":"Redis进阶","lang":"en-US","frontmatter":{"title":"Redis进阶","icon":"code","order":1,"category":"Redis","description":"day10-Redis高级 1(补) Redis 持久化 1.Redis持久化 Redis有两种持久化方案： RDB持久化 AOF持久化 1.1.RDB持久化 RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/demo/back-ends/Java%E8%BF%9B%E9%98%B6/Redis/Redis%E9%AB%98%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"Utopia"}],["meta",{"property":"og:title","content":"Redis进阶"}],["meta",{"property":"og:description","content":"day10-Redis高级 1(补) Redis 持久化 1.Redis持久化 Redis有两种持久化方案： RDB持久化 AOF持久化 1.1.RDB持久化 RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-14T16:31:33.000Z"}],["meta",{"property":"article:author","content":"GXL"}],["meta",{"property":"article:modified_time","content":"2024-09-14T16:31:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-14T16:31:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GXL\\",\\"url\\":\\"https://www.cnblogs.com/feel-myself\\",\\"email\\":\\"gaoxiaoliang123@126.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1.RDB持久化","slug":"_1-1-rdb持久化","link":"#_1-1-rdb持久化","children":[{"level":3,"title":"1.1.1.执行时机","slug":"_1-1-1-执行时机","link":"#_1-1-1-执行时机","children":[]},{"level":3,"title":"1.2.1.AOF原理","slug":"_1-2-1-aof原理","link":"#_1-2-1-aof原理","children":[]},{"level":3,"title":"1.2.2.AOF配置","slug":"_1-2-2-aof配置","link":"#_1-2-2-aof配置","children":[]},{"level":3,"title":"1.2.3.AOF文件重写","slug":"_1-2-3-aof文件重写","link":"#_1-2-3-aof文件重写","children":[]}]},{"level":2,"title":"1.3.RDB与AOF对比","slug":"_1-3-rdb与aof对比","link":"#_1-3-rdb与aof对比","children":[]},{"level":2,"title":"1.1.主从集群结构","slug":"_1-1-主从集群结构","link":"#_1-1-主从集群结构","children":[]},{"level":2,"title":"1.2.搭建主从集群","slug":"_1-2-搭建主从集群","link":"#_1-2-搭建主从集群","children":[{"level":3,"title":"1.2.1.启动多个Redis实例","slug":"_1-2-1-启动多个redis实例","link":"#_1-2-1-启动多个redis实例","children":[]},{"level":3,"title":"1.2.2.建立集群","slug":"_1-2-2-建立集群","link":"#_1-2-2-建立集群","children":[]},{"level":3,"title":"1.2.3.测试","slug":"_1-2-3-测试","link":"#_1-2-3-测试","children":[]}]},{"level":2,"title":"1.3.主从同步原理","slug":"_1-3-主从同步原理","link":"#_1-3-主从同步原理","children":[{"level":3,"title":"1.3.1.全量同步","slug":"_1-3-1-全量同步","link":"#_1-3-1-全量同步","children":[]},{"level":3,"title":"1.3.2.增量同步","slug":"_1-3-2-增量同步","link":"#_1-3-2-增量同步","children":[]},{"level":3,"title":"1.3.3.repl_baklog原理","slug":"_1-3-3-repl-baklog原理","link":"#_1-3-3-repl-baklog原理","children":[]}]},{"level":2,"title":"1.4.主从同步优化","slug":"_1-4-主从同步优化","link":"#_1-4-主从同步优化","children":[]},{"level":2,"title":"2.1.哨兵工作原理","slug":"_2-1-哨兵工作原理","link":"#_2-1-哨兵工作原理","children":[{"level":3,"title":"2.1.1.哨兵作用","slug":"_2-1-1-哨兵作用","link":"#_2-1-1-哨兵作用","children":[]},{"level":3,"title":"2.1.2.状态监控","slug":"_2-1-2-状态监控","link":"#_2-1-2-状态监控","children":[]},{"level":3,"title":"2.1.3.选举leader","slug":"_2-1-3-选举leader","link":"#_2-1-3-选举leader","children":[]},{"level":3,"title":"2.1.4.failover","slug":"_2-1-4-failover","link":"#_2-1-4-failover","children":[]}]},{"level":2,"title":"2.2.搭建哨兵集群","slug":"_2-2-搭建哨兵集群","link":"#_2-2-搭建哨兵集群","children":[]},{"level":2,"title":"2.3.演示failover","slug":"_2-3-演示failover","link":"#_2-3-演示failover","children":[]},{"level":2,"title":"2.4.总结","slug":"_2-4-总结","link":"#_2-4-总结","children":[]},{"level":2,"title":"2.5.RedisTemplate连接哨兵集群（选学）","slug":"_2-5-redistemplate连接哨兵集群-选学","link":"#_2-5-redistemplate连接哨兵集群-选学","children":[{"level":3,"title":"2.5.1.引入依赖","slug":"_2-5-1-引入依赖","link":"#_2-5-1-引入依赖","children":[]},{"level":3,"title":"2.5.2.配置哨兵地址","slug":"_2-5-2-配置哨兵地址","link":"#_2-5-2-配置哨兵地址","children":[]},{"level":3,"title":"2.5.3.配置读写分离","slug":"_2-5-3-配置读写分离","link":"#_2-5-3-配置读写分离","children":[]}]},{"level":2,"title":"3.1.搭建分片集群","slug":"_3-1-搭建分片集群","link":"#_3-1-搭建分片集群","children":[{"level":3,"title":"3.1.1.集群配置","slug":"_3-1-1-集群配置","link":"#_3-1-1-集群配置","children":[]},{"level":3,"title":"3.1.2.启动集群","slug":"_3-1-2-启动集群","link":"#_3-1-2-启动集群","children":[]}]},{"level":2,"title":"3.2.散列插槽","slug":"_3-2-散列插槽","link":"#_3-2-散列插槽","children":[]},{"level":2,"title":"3.3.故障转移","slug":"_3-3-故障转移","link":"#_3-3-故障转移","children":[]},{"level":2,"title":"3.4.总结","slug":"_3-4-总结","link":"#_3-4-总结","children":[]},{"level":2,"title":"3.5.Java客户端连接分片集群（选学）","slug":"_3-5-java客户端连接分片集群-选学","link":"#_3-5-java客户端连接分片集群-选学","children":[]},{"level":2,"title":"4.1.RedisObject","slug":"_4-1-redisobject","link":"#_4-1-redisobject","children":[]},{"level":2,"title":"4.2.SkipList","slug":"_4-2-skiplist","link":"#_4-2-skiplist","children":[]},{"level":2,"title":"4.3.SortedSet","slug":"_4-3-sortedset","link":"#_4-3-sortedset","children":[]},{"level":2,"title":"5.1.内存过期处理","slug":"_5-1-内存过期处理","link":"#_5-1-内存过期处理","children":[{"level":3,"title":"5.1.1.过期命令","slug":"_5-1-1-过期命令","link":"#_5-1-1-过期命令","children":[]},{"level":3,"title":"5.1.2.过期策略","slug":"_5-1-2-过期策略","link":"#_5-1-2-过期策略","children":[]}]},{"level":2,"title":"5.2.内存淘汰策略","slug":"_5-2-内存淘汰策略","link":"#_5-2-内存淘汰策略","children":[{"level":3,"title":"5.2.1.内存淘汰时机","slug":"_5-2-1-内存淘汰时机","link":"#_5-2-1-内存淘汰时机","children":[]},{"level":3,"title":"5.2.2.淘汰策略","slug":"_5-2-2-淘汰策略","link":"#_5-2-2-淘汰策略","children":[]}]},{"level":2,"title":"5.3.总结","slug":"_5-3-总结","link":"#_5-3-总结","children":[]},{"level":2,"title":"6.1.缓存一致性","slug":"_6-1-缓存一致性","link":"#_6-1-缓存一致性","children":[]},{"level":2,"title":"6.2.缓存穿透","slug":"_6-2-缓存穿透","link":"#_6-2-缓存穿透","children":[{"level":3,"title":"6.2.1.缓存空值","slug":"_6-2-1-缓存空值","link":"#_6-2-1-缓存空值","children":[]},{"level":3,"title":"6.2.2.布隆过滤器","slug":"_6-2-2-布隆过滤器","link":"#_6-2-2-布隆过滤器","children":[]}]},{"level":2,"title":"6.3.缓存雪崩","slug":"_6-3-缓存雪崩","link":"#_6-3-缓存雪崩","children":[]},{"level":2,"title":"6.4.缓存击穿","slug":"_6-4-缓存击穿","link":"#_6-4-缓存击穿","children":[]},{"level":2,"title":"6.5.面试总结","slug":"_6-5-面试总结","link":"#_6-5-面试总结","children":[]}],"git":{"createdTime":1726331493000,"updatedTime":1726331493000,"contributors":[{"name":"udo-bit","email":"enote_gxl@163.com","commits":1}]},"readingTime":{"minutes":55.84,"words":16751},"filePathRelative":"demo/back-ends/Java进阶/Redis/Redis高级.md","localizedDate":"September 14, 2024","excerpt":"\\n<h1>1(补) Redis 持久化</h1>\\n<h1>1.Redis持久化</h1>\\n<p>Redis有两种持久化方案：</p>\\n<ul>\\n<li>RDB持久化</li>\\n<li>AOF持久化</li>\\n</ul>\\n<h2>1.1.RDB持久化</h2>\\n<p>RDB全称Redis Database Backup\\nfile（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。</p>\\n<h3>1.1.1.执行时机</h3>\\n<p>RDB持久化在四种情况下会执行：</p>","autoDesc":true}');export{Bi as comp,Fi as data};
