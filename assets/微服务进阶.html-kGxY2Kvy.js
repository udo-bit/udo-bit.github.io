import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,d as l}from"./app-CjACv6nF.js";const c="/assets/1689235234738-c2133a87-0a12-4f3f-931d-6921b00e239b-uLixRRne.jpeg",t="/assets/1689235341374-1589206f-6998-4ef8-a722-dca33861f8fb-BXj7Q9rr.jpeg",p="/assets/1689235428372-bbdd3d83-f4d6-4e83-8506-a5ad70333b64-BwL9TnIl.jpeg",o="/assets/1696494118862-87d7ad02-f101-446e-bc1a-0a17cdd8602c-CutPi0gd.jpeg",d="/assets/1689237502763-dc7a2566-0dd5-45ef-89ba-e4ca71ccd779-CK0asGD_.jpeg",r="/assets/1689239809669-ab774c52-6242-41bb-933f-b494a617488a-W99-gnX2.png",g="/assets/1689239957719-28f189c4-b6bb-4114-b698-39b1457f2af3-CpeOgJ06.png",h="/assets/1689239030962-677ae419-323a-437c-8886-a6b4b419b0a8-C3bCy4ur.png",k="/assets/1689239091215-18a64d44-9229-4d9e-afc1-27150009abe7-BG84Z3Vw.png",i="/assets/1689240497567-01e887fc-fe7b-42c1-aca3-de86c660f864-7PJosZ80.png",m="/assets/1689240533695-f8a9b1e4-195d-422e-a844-a61f8a830a10-Ddriy0Tl.png",u="/assets/1689240683673-4e4ea003-b048-4d69-aa44-c1738cd5e4f4-BepT4XlH.png",f="/assets/1689240945879-c96640a1-feb4-48c5-9400-11bcda84f260-pewBs0vf.png",b="/assets/1689241125453-d9ea1c97-f41b-40d4-98f6-de0bdcc8ae44-DdSn9dKY.png",y="/assets/1689046820298-9a0e19a2-41fe-446e-8665-502dd4682366-DSiaZ3Uh.png",_="/assets/1689056214890-4fa4353e-5271-4232-8df6-431e1a4b36c9-BKHWj1FA.png",B="/assets/1689056286383-76505da6-ca43-4074-be62-37f67deac161-BHv9Bx6V.png",A="/assets/1689056326753-d93eb095-e973-4a6e-87ee-295704ce60f1-C7KZyuEx.png",v="/assets/1689056389992-38756cf0-0b4d-4459-8078-3dc97134ece1-DfMoaowD.png",C="/assets/1689056478268-8ca128dc-f31c-47e0-bad5-e27681d3ef50-CNzlNn3r.png",E="/assets/1689056529073-a26402ae-3f29-4841-bf4a-270d19071c4a-ChQFevdo.png",x="/assets/1689057214858-920de3d1-9b16-4724-b581-c345f1ac1100-Bk3fR8Hd.png",F="/assets/1689057282017-ff9b7d23-b6f9-431a-b6b7-a6f6449b6761-D00Mkv_h.png",S="/assets/1689057561371-86013a0e-f4a7-4ec9-8a6a-193a2f781889-V4ERvnQ6.png",z="/assets/1689057634072-97e96b42-4849-42d5-8010-5d66dd8cde46-DYlOeK2c.png",D="/assets/1689058334920-ed09a6da-e86a-4a92-9fba-edcf9ed88a47-CBgauh--.png",N="/assets/1689059788808-f88a13b3-6fba-4823-b282-e2dd358d6973-B4fNXUpy.png",L="/assets/1689156310317-a5e94ec5-4356-43e5-a2b8-0403757c1652-lCewxNoN.png",R="/assets/1689166430661-696b27b6-9d05-4ccb-a524-720eb4bc6bfb-DNJnTqd-.png",T="/assets/1689166615017-ea3cd436-ecea-4e3b-8721-12542edf8880-B077p-64.png",I="/assets/1689166949947-0a672ad3-b4a7-4eb1-9c41-8f111ce55c69-zd_-BfVx.png",P="/assets/1689166921351-f7060195-dda2-4d2a-a454-9bda94a6ef50-DECQGVbu.png",w="/assets/1689060940962-bc1db593-2da6-48f9-8470-1074464514f9-C6x-MMkO.png",O="/assets/1689131635059-8e273197-f5ee-495e-aac3-77217894bdb1-BnxYWeVt.png",j="/assets/1689131986919-d4fe81bb-77c1-420d-b01d-2f1882eae9c3-DWodgZTq.png",q="/assets/1689132071371-c78affd0-34a5-49d6-80b9-9820341f58ba-CpBqTFgZ.png",H="/assets/1689132458556-bba8f453-61db-4150-a03c-2eec27a8c775-BNLdpKdw.png",M="/assets/1689132650822-6ba24368-b5bd-4e79-9a2f-4caeb780f31e-C8UPRjM6.png",Q="/assets/1689133083968-e638e414-27d3-4fbe-990a-f4610ab12d89-QWQ3yAK1.png",U="/assets/1689134280351-0ae446bc-e8fb-463e-baed-d7e2a5a3dcac-CIMcAlN8.png",W="/assets/1689134534132-cbc5c9e4-7f2c-4652-8233-3c0f238c15f0-DNk7k71w.png",J="/assets/1689146398365-a0d76490-cc85-42ba-b2f4-7269027767c2-BV-sgNKs.png",Z="/assets/1689143457190-a0b64674-432e-4821-8c1c-69604ec7456b-lcBCXbSd.png",K="/assets/1689143880297-4f8a2fe7-acec-495d-97e0-a5b018cba556-DzZLWe2T.png",V="/assets/1689144252224-23f2e64b-6aa8-4278-af63-e49de5a2a23a-Z5UEl1fb.png",a="/assets/1689144578537-ea7eabbf-8e1d-4b24-bc2d-5dc2431e06f7-BgKafXGj.png",G="/assets/1689145502086-3480d05d-4407-488e-9ab7-9ba3c193accb-DjlaVcvl.png",X="/assets/1689145780236-59c492b0-01a0-4f30-b45d-9638329facf0-DOOw-Q0K.png",Y="/assets/1689145978608-ea0be3bb-9c59-4256-aa08-0de162f7cbd1-Cr5s9ofI.png",$="/assets/1689149817494-97f1364d-b978-4dbb-b370-4b8c0397cc73-D7POBWdm.jpeg",ii="/assets/1689152390396-d212bada-0908-45ca-a8d0-c45660315c06-CvGNyHn8.png",ai="/assets/1689152569539-7489119a-58f7-402e-a47e-c81b9a727d7a-rQyNno7s.png",ei="/assets/1689154163822-df17df51-ecbc-4ff0-86ac-1114bbdc8d6a-DDup2Nf5.png",si="/assets/1689167339969-2cc71e2b-ce5c-4b2f-91f7-f01d068a0338-DzjyUMpw.png",ni="/assets/1689154299453-45123a98-2208-4c98-bffb-111dd2b886ce-DhVBri2B.png",li="/assets/1689154976409-ab2fd403-377e-4cbb-83cb-7887e518df77-CaodaHfP.png",ci="/assets/1689155524440-d4dc3131-88fd-4696-8b8f-dd7dba3d3eed-DuNmpKrt.png",ti="/assets/1689155720819-7021261f-be66-414d-807e-bb0f472a6d2a-zdI_s6d1.png",pi="/assets/1689167632460-814d9b86-fa04-49a2-a94e-84305110ebb3-qVBIBZrI.png",oi="/assets/1689167799794-0a347612-f953-4a2f-ad25-8a70eeb64ffe-DzrO3_Wt.png",di="/assets/1689167928605-0fe667a5-5a95-45ad-9c8f-b1afe30e95c7-NHPP0Sp2.png",ri="/assets/1689168272836-dd9b5c9a-c01d-4828-b363-6339411bcddb-O7yQW-dv.png",gi="/assets/1689168314436-e1b6381c-3e5d-4c95-8a41-c5386a818a80-ClDcmudf.png",hi="/assets/1689169655000-dea0ba8f-c985-4998-9c07-ee931ada35a1-oMBMts9M.png",ki="/assets/1686828034624-5b8a646e-9a31-47b1-b631-ef278ab852c5-B79HYyop.jpeg",mi="/assets/1689215317480-409c6929-7226-4bcf-bd16-cf05268bdeb8-C8h_rW8W.png",ui="/assets/1689216135269-5e30852e-d033-488b-9821-905661355bc7-D20eXe28.png",fi="/assets/1689216321891-3d2ded35-0b3b-41f9-8ec1-c5acc13d2724-BfW_HQTD.png",bi="/assets/1689216510725-ab573d15-b984-43f6-a1f6-3e0072443ffc-CRetD9E6.png",yi="/assets/1689219670217-ce4b5fe8-6fa7-4ba7-abdd-f41b1161aff4-DeIuj7qD.png",_i="/assets/1689229430225-9986c1e2-9ec2-486a-9ca8-3790423e3344-DD2Im5e2.png",Bi="/assets/1689229580556-f9b194eb-61a9-4cfe-95c3-5335aa2b2c41-BpgzMJhk.png",Ai="/assets/1689230342777-6976e762-c49a-4871-9c0a-115fd57879c4-ChpHl2qN.png",vi="/assets/1689231428197-d24653c5-1206-4e17-985d-87b0ee8e4b98-CWDzlCUn.png",Ci="/assets/1689231666958-c61fcf41-2c93-422b-867c-86625bbaacc1-DWGoWfg5.png",Ei={},xi=l('<h1 id="day11-微服务高级" tabindex="-1"><a class="header-anchor" href="#day11-微服务高级"><span>day11-微服务高级</span></a></h1><p>微服务在面试时被问到的内容相对较少，常见的面试题如下：</p><ul><li>SpringCloud有哪些常用组件？分别是什么作用？</li><li>服务注册发现的基本流程是怎样的？</li><li>Eureka和Nacos有哪些区别？</li><li>Nacos的分级存储模型是什么意思？</li><li>Ribbon和SpringCloudLoadBalancer有什么差异</li><li>什么是服务雪崩，常见的解决方案有哪些？</li><li>Hystix和Sentinel有什么区别和联系？</li><li>限流的常见算法有哪些？</li><li>什么是CAP理论和BASE思想？</li><li>项目中碰到过分布式事务问题吗？怎么解决的？</li><li>AT模式如何解决脏读和脏写问题的？</li><li>TCC模式与AT模式对比，有哪些优缺点</li></ul><p>可以发现，这些问题都是围绕着SpringCloud的相关组件的，其中有些问题我们在课堂上已经介绍过，这里不再赘述。我们重点讲解一些之前没有讲过的，与底层实现有关的部分。</p><p>讲解的思路还是基于SpringCloud的组件分类来讲的，主要包括：</p><ul><li>分布式事务</li><li>注册中心</li><li>远程调用</li><li>服务保护</li></ul><p>等几个方面</p><h1 id="_1-分布式事务" tabindex="-1"><a class="header-anchor" href="#_1-分布式事务"><span>1.分布式事务</span></a></h1><p><strong>分布式事务</strong>，就是指不是在单个服务或单个数据库架构下，产生的事务，例如：</p><ul><li>跨数据源的分布式事务</li><li>跨服务的分布式事务</li><li>综合情况</li></ul><p>我们之前解决分布式事务问题是直接使用Seata框架的AT模式，但是解决分布式事务问题的方案远不止这一种。</p><h2 id="_1-1-cap定理" tabindex="-1"><a class="header-anchor" href="#_1-1-cap定理"><span>1.1.CAP定理</span></a></h2><p>解决分布式事务问题，需要一些分布式系统的基础知识作为理论指导，首先就是CAP定理。</p><p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标：</p><ul><li><strong>C</strong>onsistency（一致性）</li><li><strong>A</strong>vailability（可用性）</li><li><strong>P</strong>artition tolerance （分区容错性）</li></ul><p>它们的第一个字母分别是 <code>C</code>、<code>A</code>、<code>P</code>。Eric Brewer认为任何分布式系统架构方案都不可能同时满足这3个目标，这个结论就叫做 CAP 定理。</p><p>为什么呢？</p><h3 id="_1-1-1-一致性" tabindex="-1"><a class="header-anchor" href="#_1-1-1-一致性"><span>1.1.1.一致性</span></a></h3><p><code>Consistency</code>（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</p><p>比如现在包含两个节点，其中的初始数据是一致的：</p><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当我们修改其中一个节点的数据时，两者的数据产生了差异：</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要想保住一致性，就必须实现node01 到 node02的数据 同步：</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1-1-2-可用性" tabindex="-1"><a class="header-anchor" href="#_1-1-2-可用性"><span>1.1.2.可用性</span></a></h3><p>Availability （可用性）：用户访问分布式系统时，读或写操作总能成功。</p><p>只能读不能写，或者只能写不能读，或者两者都不能执行，就说明系统弱可用或不可用。</p><h3 id="_1-1-3-分区容错" tabindex="-1"><a class="header-anchor" href="#_1-1-3-分区容错"><span>1.1.3.分区容错</span></a></h3><p><code>Partition</code>，就是分区，就是当分布式系统节点之间出现网络故障导致节点之间无法通信的情况：</p><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图，node01和node02之间网关畅通，但是与node03之间网络断开。于是node03成为一个独立的网络分区；node01和node02在一个网络分区。</p><p><code>Tolerance</code>，就是容错，即便是系统出现网络分区，整个系统也要持续对外提供服务。</p><h3 id="_1-1-4-矛盾" tabindex="-1"><a class="header-anchor" href="#_1-1-4-矛盾"><span>1.1.4.矛盾</span></a></h3><p>在分布式系统中，网络不能100%保证畅通，也就是说网络分区的情况一定会存在。而我们的系统必须要持续运行，对外提供服务。所以分区容错性（ <code>P</code>）是硬性指标，所有分布式系统都要满足。而在设计分布式系统时要取舍的就是一致性（<code>C</code>）和可用性（<code>A</code>）了。</p><p>假如现在出现了网络分区，如图：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于网络故障，当我们把数据写入node01时，可以与node02完成数据同步，但是无法同步给node03。现在有两种选择：</p><ul><li>允许用户任意读写，保证可用性。但由于node03无法完成同步，就会出现数据不一致的情况。满足AP</li><li>不允许用户写，可以读，直到网络恢复，分区消失。这样就确保了一致性，但牺牲了可用性。满足CP</li></ul><p>可见，在分布式系统中，<code>A</code>和<code>C</code>之间只能满足一个。</p><h2 id="_1-2-base理论" tabindex="-1"><a class="header-anchor" href="#_1-2-base理论"><span>1.2.BASE理论</span></a></h2><p>既然分布式系统要遵循CAP定理，那么问题来了，我到底是该牺牲一致性还是可用性呢？如果牺牲了一致性，出现数据不一致该怎么处理？</p><p>人们在总结系统设计经验时，最终得到了一些心得：</p><ul><li><strong>B</strong>asically <strong>A</strong>vailable <strong>（<strong>基本可用</strong>）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>S</strong>oft State**（<strong>软状态</strong>）：**在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Ev</strong>entually Consistent**（<strong>最终一致性</strong>）**：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><p>以上就是BASE理论。</p><p>简单来说，BASE理论就是一种取舍的方案，不再追求完美，而是最终达成目标。因此解决分布式事务的思想也是这样，有两个方向：</p><ul><li>AP思想：各个子事务分别执行和提交，无需锁定数据。允许出现结果不一致，然后采用弥补措施恢复，实现最终一致即可。例如<code>AT</code>模式就是如此</li><li>CP思想：各个子事务执行后不要提交，而是等待彼此结果，然后同时提交或回滚。在这个过程中锁定资源，不允许其它人访问，数据处于不可用状态，但能保证一致性。例如 <code>XA</code>模式</li></ul><h2 id="_1-3-at模式的脏写问题" tabindex="-1"><a class="header-anchor" href="#_1-3-at模式的脏写问题"><span>1.3.AT模式的脏写问题</span></a></h2><p>我们先回顾一下AT模式的流程，AT模式也分为两个阶段：</p><p>第一阶段是记录数据快照，执行并提交事务：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>第二阶段根据阶段一的结果来判断：</p><ul><li>如果每一个分支事务都成功，则事务已经结束（因为阶段一已经提交），因此删除阶段一的快照即可</li><li>如果有任意分支事务失败，则需要根据快照恢复到更新前数据。然后删除快照</li></ul><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种模式在大多数情况下（99%）并不会有什么问题，不过在极端情况下，特别是多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>具体可以参考官方文档：</p><p>https://seata.io/zh-cn/docs/dev/mode/at-mode.html</p><h2 id="_1-4-tcc模式" tabindex="-1"><a class="header-anchor" href="#_1-4-tcc模式"><span>1.4.TCC模式</span></a></h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li><code>try</code>：资源的检测和预留；</li><li><code>confirm</code>：完成资源操作业务；要求 <code>try</code> 成功 <code>confirm</code> 一定要能成功。</li><li><code>cancel</code>：预留资源释放，可以理解为try的反向操作。</li></ul><h3 id="_1-4-1-流程分析" tabindex="-1"><a class="header-anchor" href="#_1-4-1-流程分析"><span>1.4.1.流程分析</span></a></h3><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p><p><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</p><p>初始余额：</p><figure><img src="'+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>余额充足，可以冻结：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，总金额 = 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p><p><strong>阶段二（Confirm)</strong>：假如要提交（Confirm），之前可用金额已经扣减，并转移到冻结金额。因此可用金额不变，直接冻结金额扣减30即可：</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，总金额 = 冻结金额 + 可用金额 = 0 + 70 = 70元</p><p><strong>阶段二(Canncel)</strong> ：如果要回滚（Cancel），则释放之前冻结的金额，也就是冻结金额扣减30，可用余额增加30<img src="'+i+'" alt="img" loading="lazy"></p><h3 id="_1-4-2-事务悬挂和空回滚" tabindex="-1"><a class="header-anchor" href="#_1-4-2-事务悬挂和空回滚"><span>1.4.2.事务悬挂和空回滚</span></a></h3><p>假如一个分布式事务中包含两个分支事务，try阶段，一个分支成功执行，另一个分支事务<strong>阻塞</strong>：</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果阻塞时间太长，可能导致全局事务超时而触发二阶段的<code>cancel</code>操作。两个分支事务都会执行cancel操作：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要知道，其中一个分支是未执行<code>try</code>操作的，直接执行了<code>cancel</code>操作，反而会导致数据错误。因此，这种情况下，尽管<code>cancel</code> 方法要执行，但其中不能做任何回滚操作，这就是<strong>空回滚</strong>。</p><p>对于整个空回滚的分支事务，将来try方法阻塞结束依然会执行。但是整个全局事务其实已经结束了，因此永远不会再有confirm或cancel，也就是说这个事务执行了一半，处于 <strong>悬挂状态</strong>，这就是业务悬挂问题。</p><p>以上问题都需要我们在编写try、cancel方法时处理。</p><h3 id="_1-4-3-总结" tabindex="-1"><a class="header-anchor" href="#_1-4-3-总结"><span>1.4.3.总结</span></a></h3><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理、事务悬挂和空回滚处理</li></ul><h1 id="_2-注册中心" tabindex="-1"><a class="header-anchor" href="#_2-注册中心"><span>2.注册中心</span></a></h1><p>本章主要学习Nacos中的一些特性和原理，以及与Eureka的功能对比。</p><h2 id="_2-1-环境隔离" tabindex="-1"><a class="header-anchor" href="#_2-1-环境隔离"><span>2.1.环境隔离</span></a></h2><p>企业实际开发中，往往会搭建多个运行环境，例如：</p><ul><li>开发环境</li><li>测试环境</li><li>预发布环境</li><li>生产环境</li></ul><p>这些不同环境之间的服务和数据之间需要隔离。</p><p>还有的企业中，会开发多个项目，共享nacos集群。此时，这些项目之间也需要把服务和数据隔离。</p><p>因此，Nacos提供了基于<code>namespace</code>的环境隔离功能。具体的隔离层次如图所示：</p><figure><img src="'+y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li>Nacos中可以配置多个<code>namespace</code>，相互之间完全隔离。默认的<code>namespace</code>名为<code>public</code></li><li><code>namespace</code>下还可以继续分组，也就是group ，相互隔离。 默认的group是<code>DEFAULT_GROUP</code></li><li><code>group</code>之下就是服务和配置了</li></ul><h3 id="_2-1-1-创建namespace" tabindex="-1"><a class="header-anchor" href="#_2-1-1-创建namespace"><span>2.1.1.创建namespace</span></a></h3><p>nacos提供了一个默认的<code>namespace</code>，叫做<code>public</code>：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>默认所有的服务和配置都属于这个<code>namespace</code>，当然我们也可以自己创建新的<code>namespace</code>：</p><figure><img src="'+B+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后填写表单：</p><figure><img src="'+A+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>添加完成后，可以在页面看到我们新建的<code>namespace</code>，并且Nacos为我们自动生成了一个命名空间id：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们切换到配置列表页，你会发现<code>dev</code>这个命名空间下没有任何配置：</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为之前我们添加的所有配置都在<code>public</code>下：</p><figure><img src="'+E+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-1-2-微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#_2-1-2-微服务配置namespace"><span>2.1.2.微服务配置namespace</span></a></h3><p>默认情况下，所有的微服务注册发现、配置管理都是走<code>public</code>这个命名空间。如果要指定命名空间则需要修改<code>application.yml</code>文件。</p><p>比如，我们修改<code>item-service</code>服务的bootstrap.yml文件，添加服务发现配置，指定其<code>namespace</code>：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">item-service</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 服务名称</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  profiles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dev</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168.150.101</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # nacos地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 服务发现配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">8c468c63-b650-48da-a632-311c75e6d235</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 设置namespace，必须用id</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      # 。。。略</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动<code>item-service</code>，查看服务列表，会发现<code>item-service</code>出现在<code>dev</code>下：</p><figure><img src="`+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>而其它服务则出现在<code>public</code>下：</p><figure><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时访问<code>http://localhost:8082/doc.html</code>，基于<code>swagger</code>做测试：</p><figure><img src="'+S+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>会发现查询结果中缺少商品的最新价格信息。</p><p>我们查看服务运行日志：</p><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>会发现<code>cart-service</code>服务在远程调用<code>item-service</code>时，并没有找到可用的实例。这证明不同namespace之间确实是相互隔离的，不可访问。</p><p>当我们把<code>namespace</code>切换回<code>public</code>，或者统一都是以<code>dev</code>时访问恢复正常。</p><h2 id="_2-2-分级模型" tabindex="-1"><a class="header-anchor" href="#_2-2-分级模型"><span>2.2.分级模型</span></a></h2><p>在一些大型应用中，同一个服务可以部署很多实例。而这些实例可能分布在全国各地的不同机房。由于存在地域差异，网络传输的速度会有很大不同，因此在做服务治理时需要区分不同机房的实例。</p><p>例如item-service，我们可以部署3个实例：</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布在不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos中提供了集群（<code>cluster</code>）的概念，来对应不同机房。也就是说，一个服务（<code>service</code>）下可以有很多集群（<code>cluster</code>），而一个集群（ <code>cluster</code>）中下又可以包含很多实例（<code>instance</code>）。</p><p>如图：</p><figure><img src="'+D+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，结合我们上一节学习的<code>namespace</code>命名空间的知识，任何一个微服务的实例在注册到Nacos时，都会生成以下几个信息，用来确认当前实例的身份，从外到内依次是：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>service：服务名</li><li>cluster：集群</li><li>instance：实例，包含ip和端口</li></ul><p>这就是nacos中的服务分级模型。</p><p>在Nacos内部会有一个服务实例的注册表，是基于Map实现的，其结构与分级模型的对应关系如下：</p><figure><img src="'+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看nacos控制台，会发现默认情况下所有服务的集群都是default：</p><figure><img src="'+L+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果我们要修改服务所在集群，只需要修改<code>bootstrap.yml</code>即可：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        cluster-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">BJ</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 集群名称，自定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们修改<code>item-service</code>的<code>bootstrap.yml</code>，然后重新创建一个实例：</p><figure><img src="`+R+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再次查看nacos：</p><figure><img src="'+T+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>发现8084这个新的实例确实属于<code>BJ</code>这个集群了。</p><h2 id="_2-3-eureka" tabindex="-1"><a class="header-anchor" href="#_2-3-eureka"><span>2.3.Eureka</span></a></h2><p>Eureka是Netflix公司开源的一个服务注册中心组件，早期版本的SpringCloud都是使用Eureka作为注册中心。由于Eureka和Nacos的starter中提供的功能都是基于SpringCloudCommon规范，因此两者使用起来差别不大。</p><p>课前资料中提供了一个Eureka的demo：</p><figure><img src="'+I+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们可以用idea打开查看一下：</p><figure><img src="'+P+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>结构说明：</p><ul><li><code>eureka-server</code>：Eureka的服务端，也就是注册中心。没错，Eureka服务端要自己创建项目</li><li><code>order-service</code>：订单服务，是一个服务调用者，查询订单的时候要查询用户</li><li><code>user-service</code>：用户服务，是一个服务提供者，对外暴露查询用户的接口</li></ul><p>启动以后，访问<code>localhost:10086</code>即可查看到Eureka的控制台，相对于Nacos来说简陋了很多：</p><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>微服务引入Eureka的方式也极其简单，分两步：</p><ul><li>引入<code>eureka-client</code>依赖</li><li>配置<code>eureka</code>地址</li></ul><p>接下来就是编写OpenFeign的客户端了，怎么样？是不是跟Nacos用起来基本一致。</p><h2 id="_2-4-eureka和nacos对比" tabindex="-1"><a class="header-anchor" href="#_2-4-eureka和nacos对比"><span>2.4.Eureka和Nacos对比</span></a></h2><p>Eureka和Nacos都能起到注册中心的作用，用法基本类似。但还是有一些区别的，例如：</p><ul><li>Nacos支持配置管理，而Eureka则不支持。</li></ul><p>而且服务注册发现上也有区别，我们来做一个实验：</p><p>我们停止<code>user-service</code>服务，然后观察Eureka控制台，你会发现很长一段时间过去后，Eureka服务依然没有察觉<code>user-service</code>的异常状态。</p><p>这与Eureka的健康检测机制有关。在Eureka中，健康检测的原理如下：</p><ul><li>微服务启动时注册信息到Eureka，这点与Nacos一致。</li><li>微服务每隔30秒向Eureka发送心跳请求，报告自己的健康状态。Nacos中默认是5秒一次。</li><li>Eureka如果90秒未收到心跳，则认为服务疑似故障，可能被剔除。Nacos中则是15秒超时，30秒剔除。</li><li>Eureka如果发现超过85%比例的服务都心跳异常，会认为是自己的网络异常，暂停剔除服务的功能。</li><li>Eureka每隔60秒执行一次服务检测和清理任务；Nacos是每隔5秒执行一次。</li></ul><p>综上，你会发现Eureka是尽量不剔除服务，避免“误杀”，宁可放过一千，也不错杀一个。这就导致当服务真的出现故障时，迟迟不会被剔除，给服务的调用者带来困扰。</p><p>不仅如此，当Eureka发现服务宕机并从服务列表中剔除以后，并不会将服务列表的变更消息推送给所有微服务。而是等待微服务自己来拉取时发现服务列表的变化。而微服务每隔30秒才会去Eureka更新一次服务列表，进一步推迟了服务宕机时被发现的时间。</p><p>而Nacos中微服务除了自己定时去Nacos中拉取服务列表以外，Nacos还会在服务列表变更时主动推送最新的服务列表给所有的订阅者。</p><p>综上，Eureka和Nacos的相似点有：</p><ul><li>都支持服务注册发现功能</li><li>都有基于心跳的健康监测功能</li><li>都支持集群，集群间数据同步默认是AP模式，即最全高可用性</li></ul><p>Eureka和Nacos的区别有：</p><ul><li>Eureka的心跳是30秒一次，Nacos则是5秒一次</li><li>Eureka如果90秒未收到心跳，则认为服务疑似故障，可能被剔除。Nacos中则是15秒超时，30秒剔除。</li><li>Eureka每隔60秒执行一次服务检测和清理任务；Nacos是每隔5秒执行一次。</li><li>Eureka只能等微服务自己每隔30秒更新一次服务列表；Nacos即有定时更新，也有在服务变更时的广播推送</li><li>Eureka仅有注册中心功能，而Nacos同时支持注册中心、配置管理</li><li>Eureka和Nacos都支持集群，而且默认都是AP模式</li></ul><h1 id="_3-远程调用" tabindex="-1"><a class="header-anchor" href="#_3-远程调用"><span>3.远程调用</span></a></h1><p>我们知道微服务间远程调用都是有OpenFeign帮我们完成的，甚至帮我们实现了服务列表之间的负载均衡。但具体负载均衡的规则是什么呢？何时做的负载均衡呢？</p><p>接下来我们一起来分析一下。</p><h2 id="_3-1-负载均衡原理" tabindex="-1"><a class="header-anchor" href="#_3-1-负载均衡原理"><span>3.1.负载均衡原理</span></a></h2><p>在SpringCloud的早期版本中，负载均衡都是有Netflix公司开源的Ribbon组件来实现的，甚至Ribbon被直接集成到了Eureka-client和Nacos-Discovery中。</p><p>但是自SpringCloud2020版本开始，已经弃用Ribbon，改用Spring自己开源的Spring Cloud LoadBalancer了，我们使用的OpenFeign的也已经与其整合。</p><p>接下来我们就通过源码分析，来看看OpenFeign底层是如何实现负载均衡功能的。</p><h3 id="_3-1-1-源码跟踪" tabindex="-1"><a class="header-anchor" href="#_3-1-1-源码跟踪"><span>3.1.1.源码跟踪</span></a></h3><p>要弄清楚OpenFeign的负载均衡原理，最佳的办法肯定是从FeignClient的请求流程入手。</p><p>首先，我们在<code>com.hmall.cart.service.impl.CartServiceImpl</code>中的<code>queryMyCarts</code>方法中打一个断点。然后在swagger页面请求购物车列表接口。</p><p>进入断点后，观察<code>ItemClient</code>这个接口：</p><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你会发现ItemClient是一个代理对象，而代理的处理器则是<code>SentinelInvocationHandler</code>。这是因为我们项目中引入了<code>Sentinel</code>导致。</p><p>我们进入<code>SentinelInvocationHandler</code>类中的<code>invoke</code>方法看看：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到这里是先获取被代理的方法的处理器<code>MethodHandler</code>，接着，Sentinel就会开启对簇点资源的监控：</p><figure><img src="'+q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>开启Sentinel的簇点资源监控后，就可以调用处理器了，我们尝试跟入，会发现有两种实现：</p><figure><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这其实就是OpenFeign远程调用的处理器了。继续跟入会进入<code>SynchronousMethodHandler</code>这个实现类：</p><figure><img src="'+M+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在上述方法中，会循环尝试调用<code>executeAndDecode()</code>方法，直到成功或者是重试次数达到Retryer中配置的上限。</p><p>我们继续跟入<code>executeAndDecode()</code>方法：</p><figure><img src="'+Q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>executeAndDecode()</code>方法最终会利用<code>client</code>去调用<code>execute()</code>方法，发起远程调用。</p><p>这里的client的类型是<code>feign.Client</code>接口，其下有很多实现类：</p><figure><img src="'+U+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于我们项目中整合了seata，所以这里client对象的类型是<code>SeataFeignBlockingLoadBalancerClient</code>，内部实现如下：</p><figure><img src="'+W+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里直接调用了其父类，也就是<code>FeignBlockingLoadBalancerClient</code>的<code>execute</code>方法，来看一下：</p><figure><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>整段代码中核心的有4步：</p><ul><li>从请求的<code>URI</code>中找出<code>serviceId</code></li><li>利用<code>loadBalancerClient</code>，根据<code>serviceId</code>做负载均衡，选出一个实例<code>ServiceInstance</code></li><li>用选中的<code>ServiceInstance</code>的<code>ip</code>和<code>port</code>替代<code>serviceId</code>，重构<code>URI</code></li><li>向真正的URI发送请求</li></ul><p>所以负载均衡的关键就是这里的loadBalancerClient，类型是<code>org.springframework.cloud.client.loadbalancer.LoadBalancerClient</code> ，这是<code>Spring-Cloud-Common</code>模块中定义的接口，只有一个实现类：</p><figure><img src="'+Z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>而这里的<code>org.springframework.cloud.client.loadbalancer.BlockingLoadBalancerClient</code>正是<code>Spring-Cloud-LoadBalancer</code> 模块下的一个类：</p><figure><img src="'+K+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们继续跟入其<code>BlockingLoadBalancerClient#choose()</code>方法：</p><figure><img src="'+V+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图中代码的核心逻辑如下：</p><ul><li>根据serviceId找到这个服务采用的负载均衡器（<code>ReactiveLoadBalancer</code>），也就是说我们可以给每个服务配不同的负载均衡算法。</li><li>利用负载均衡器（<code>ReactiveLoadBalancer</code>）中的负载均衡算法，选出一个服务实例</li></ul><p><code>ReactiveLoadBalancer</code>是<code>Spring-Cloud-Common</code>组件中定义的负载均衡器接口规范，而<code>Spring-Cloud-Loadbalancer</code>组件给出了两个实现：</p><figure><img src="'+a+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>默认的实现是<code>RoundRobinLoadBalancer</code>，即<strong>轮询</strong>负载均衡器。负载均衡器的核心逻辑如下：</p><figure><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>核心流程就是两步：</p><ul><li>利用<code>ServiceInstanceListSupplier#get()</code>方法拉取服务的实例列表，这一步是采用响应式编程</li><li>利用本类，也就是<code>RoundRobinLoadBalancer</code>的<code>getInstanceResponse()</code>方法挑选一个实例，这里采用了轮询算法来挑选。</li></ul><p>这里的ServiceInstanceListSupplier有很多实现：</p><figure><img src="'+X+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中CachingServiceInstanceListSupplier采用了装饰模式，加了服务实例列表缓存，避免每次都要去注册中心拉取服务实例列表。而其内部是基于 <code>DiscoveryClientServiceInstanceListSupplier</code>来实现的。</p><p>在这个类的构造函数中，就会异步的基于DiscoveryClient去拉取服务的实例列表：</p><figure><img src="'+Y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-1-2-流程梳理" tabindex="-1"><a class="header-anchor" href="#_3-1-2-流程梳理"><span>3.1.2.流程梳理</span></a></h3><p>根据之前的分析，我们会发现Spring在整合OpenFeign的时候，实现了 <code>org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient</code>类，其中定义了OpenFeign发起远程调用的核心流程。也就是四步：</p><ul><li>获取请求中的<code>serviceId</code></li><li>根据<code>serviceId</code>负载均衡，找出一个可用的服务实例</li><li>利用服务实例的<code>ip</code>和<code>port</code>信息重构url</li><li>向真正的url发起请求</li></ul><p>而具体的负载均衡则是不是由<code>OpenFeign</code>组件负责。而是分成了<strong>负载均衡的接口规范</strong>，以及<strong>负载均衡的具体实现</strong>两部分。</p><p>负载均衡的接口规范是定义在<code>Spring-Cloud-Common</code>模块中，包含下面的接口：</p><ul><li><code>LoadBalancerClient</code>：负载均衡客户端，职责是根据serviceId最终负载均衡，选出一个服务实例</li><li><code>ReactiveLoadBalancer</code>：负载均衡器，负责具体的负载均衡算法</li></ul><p>OpenFeign的负载均衡是基于<code>Spring-Cloud-Common</code>模块中的负载均衡规则接口，并没有写死具体实现。这就意味着以后还可以拓展其它各种负载均衡的实现。</p><p>不过目前<code>SpringCloud</code>中只有<code>Spring-Cloud-Loadbalancer</code>这一种实现。</p><p><code>Spring-Cloud-Loadbalancer</code>模块中，实现了<code>Spring-Cloud-Common</code>模块的相关接口，具体如下：</p><ul><li><code>BlockingLoadBalancerClient</code>：实现了<code>LoadBalancerClient</code>，会根据serviceId选出负载均衡器并调用其算法实现负载均衡。</li><li><code>RoundRobinLoadBalancer</code>：基于轮询算法实现了<code>ReactiveLoadBalancer</code></li><li><code>RandomLoadBalancer</code>：基于随机算法实现了<code>ReactiveLoadBalancer</code>，</li></ul><p>这样以来，整体思路就非常清楚了，流程图如下：</p><figure><img src="'+$+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-2-nacosrule" tabindex="-1"><a class="header-anchor" href="#_3-2-nacosrule"><span>3.2.NacosRule</span></a></h2><p>之前分析源码的时候我们发现负载均衡的算法是有<code>ReactiveLoadBalancer</code>来定义的，我们发现它的实现类有三个：</p><figure><img src="'+a+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中<code>RoundRobinLoadBalancer</code>和<code>RandomLoadBalancer</code>是由<code>Spring-Cloud-Loadbalancer</code>模块提供的，而<code>NacosLoadBalancer</code>则是由 <code>Nacos-Discorvery</code>模块提供的。</p><p>默认采用的负载均衡策略是<code>RoundRobinLoadBalancer</code>，那如果我们要切换负载均衡策略该怎么办？</p><h3 id="_3-2-1-修改负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3-2-1-修改负载均衡策略"><span>3.2.1.修改负载均衡策略</span></a></h3><p>查看源码会发现，<code>Spring-Cloud-Loadbalancer</code>模块中有一个自动配置类：</p><figure><img src="'+ii+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中定义了默认的负载均衡器：</p><figure><img src="'+ai+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个Bean上添加了<code>@ConditionalOnMissingBean</code>注解，也就是说如果我们自定义了这个类型的bean，则负载均衡的策略就会被改变。</p><p>我们在<code>hm-cart</code>模块中的添加一个配置类：</p><figure><img src="'+ei+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.hmall.cart.config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.alibaba.cloud.nacos.NacosDiscoveryProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.alibaba.cloud.nacos.loadbalancer.NacosLoadBalancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.cloud.client.ServiceInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.context.annotation.Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.core.env.Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OpenFeignConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReactorLoadBalancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServiceInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reactorServiceInstanceLoadBalancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NacosDiscoveryProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            LoadBalancerClientFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> loadBalancerClientFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LoadBalancerClientFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PROPERTY_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NacosLoadBalancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                loadBalancerClientFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLazyProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ServiceInstanceListSupplier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), name, properties);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>这个配置类千万不要加<code>@Configuration</code>注解，也不要被SpringBootApplication扫描到。</p><p>由于这个OpenFeignConfig没有加<code>@Configuration</code>注解，也就没有被Spring加载，因此是不会生效的。接下来，我们要在启动类上通过注解来声明这个配置。</p><p>有两种做法：</p><ul><li>全局配置：对所有服务生效</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">LoadBalancerClients</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">defaultConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> OpenFeignConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>局部配置：只对某个服务生效</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">LoadBalancerClients</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">LoadBalancerClient</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;item-service&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> OpenFeignConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们选择全局配置：</p><figure><img src="`+si+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>DEBUG重启后测试，会发现负载均衡器的类型确实切换成功：</p><figure><img src="'+ni+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-2-2-集群优先" tabindex="-1"><a class="header-anchor" href="#_3-2-2-集群优先"><span>3.2.2.集群优先</span></a></h3><p><code>RoundRobinLoadBalancer</code>是轮询算法，<code>RandomLoadBalancer</code>是随机算法，那么<code>NacosLoadBalancer</code>是什么负载均衡算法呢？</p><p>我们通过源码来分析一下，先看第一部分：</p><figure><img src="'+li+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这部分代码的大概流程如下：</p><ul><li>通过<code>ServiceInstanceListSupplier</code>获取服务实例列表</li><li>获取<code>NacosDiscoveryProperties</code>中的<code>clusterName</code>，也就是yml文件中的配置，代表当前服务实例所在集群信息（参考<code>2.2</code>小节，分级模型）</li><li>然后利用stream的filter过滤找到被调用的服务实例中与当前服务实例<code>clusterName</code>一致的。简单来说就是**服务调用者与服务提供者要在一个集群 **</li></ul><p>为什么？</p><p>假如我现在有两个机房，都部署有<code>item-service</code>和<code>cart-service</code>服务：</p><figure><img src="'+ci+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假如这些服务实例全部都注册到了同一个Nacos。现在，杭州机房的<code>cart-service</code>要调用<code>item-service</code> ，会拉取到所有机房的item-service的实例。调用时会出现两种情况：</p><ul><li>直接调用当前机房的<code>item-service</code></li><li>调用其它机房的<code>item-service</code></li></ul><p>本机房调用几乎没有网络延迟，速度比较快。而跨机房调用，如果两个机房相距很远，会存在较大的网络延迟。因此，我们应该尽可能避免跨机房调用，优先本地集群调用：</p><figure><img src="'+ti+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在的情况是这样的：</p><ul><li><code>cart-service</code>所在集群是<code>default</code></li><li><code>item-service</code>的8081、8083所在集群的<code>default</code></li><li><code>item-service</code>的8084所在集群是<code>BJ</code></li></ul><p><code>cart-service</code>访问<code>item-service</code>时，应该优先访问8081和8082，我们重启<code>cart-service</code>，测试一下：</p><figure><img src="'+pi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到原本是3个实例，经过筛选后还剩下2个实例。</p><p>查看Debug控制台：</p><figure><img src="'+oi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>同集群的实例还剩下两个，接下来就需要做负载均衡了，具体用的是什么算法呢？</p><h3 id="_3-2-3-权重配置" tabindex="-1"><a class="header-anchor" href="#_3-2-3-权重配置"><span>3.2.3.权重配置</span></a></h3><p>我们继续跟踪<code>NacosLoadBalancer</code>源码：</p><figure><img src="'+di+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那么问题来了， 这个权重是怎么配的呢？</p><p>我们打开nacos控制台，进入<code>item-service</code>的服务详情页，可以看到每个实例后面都有一个<strong>编辑</strong>按钮：</p><figure><img src="'+ri+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击，可以看到一个编辑表单：</p><figure><img src="'+gi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们将这里的权重修改为5：</p><figure><img src="'+hi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>访问10次购物车接口，可以发现大多数请求都访问到了8083这个实例。</p><h1 id="_4-服务保护" tabindex="-1"><a class="header-anchor" href="#_4-服务保护"><span>4.服务保护</span></a></h1><p>在SpringCloud的早期版本中采用的服务保护技术叫做<code>Hystix</code>，不过后来被淘汰，替换为<code>Spring Cloud Circuit Breaker</code>，其底层实现可以是 <code>Spring Retry</code>和<code>Resilience4J</code>。</p><p>不过在国内使用较多还是<code>SpringCloudAlibaba</code>中的<code>Sentinel</code>组件。</p><p>接下来，我们就分析一下<code>Sentinel</code>组件的一些基本实现原理以及它与<code>Hystix</code>的差异。</p><h2 id="_4-1-线程隔离" tabindex="-1"><a class="header-anchor" href="#_4-1-线程隔离"><span>4.1.线程隔离</span></a></h2><p>首先我们来看下线程隔离功能，无论是Hystix还是Sentinel都支持线程隔离。不过其实现方式不同。</p><p>线程隔离有两种方式实现：</p><ul><li><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</li><li><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求</li></ul><p>如图：</p><figure><img src="'+ki+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>两者的优缺点如下：</p><figure><img src="'+mi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Sentinel的线程隔离就是基于信号量隔离实现的，而Hystix两种都支持，但默认是基于线程池隔离。</p><h2 id="_4-2-滑动窗口算法" tabindex="-1"><a class="header-anchor" href="#_4-2-滑动窗口算法"><span>4.2.滑动窗口算法</span></a></h2><p>在熔断功能中，需要统计异常请求或慢请求比例，也就是计数。在限流的时候，要统计每秒钟的QPS，同样是计数。可见计数算法在熔断限流中的应用非常多。sentinel中采用的计数器算法就是滑动窗口计数算法。</p><h3 id="_4-2-1-固定窗口计数" tabindex="-1"><a class="header-anchor" href="#_4-2-1-固定窗口计数"><span>4.2.1.固定窗口计数</span></a></h3><p>要了解滑动窗口计数算法，我们必须先知道固定窗口计数算法，其基本原理如图：</p><figure><img src="'+ui+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li>将时间划分为多个窗口，窗口时间跨度称为<code>Interval</code>，本例中为1000ms；</li><li>每个窗口维护1个计数器，每有1次请求就将计数器<code>+1</code>。限流就是设置计数器阈值，本例为3，图中红线标记</li><li>如果计数器超过了限流阈值，则超出阈值的请求都被丢弃。</li></ul><p>示例：</p><figure><img src="'+fi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li>第1、2秒，请求数量都小于3，没问题</li><li>第3秒，请求数量为5，超过阈值，超出的请求被拒绝</li></ul><p>但是我们考虑一种特殊场景，如图：</p><figure><img src="'+bi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li>假如在第5、6秒，请求数量都为3，没有超过阈值，全部放行</li><li>但是，如果第5秒的三次请求都是在4.5<sub>5秒之间进来；第6秒的请求是在5</sub>5.5之间进来。那么从第4.5~5.之间就有6次请求！也就是说每秒的QPS达到了6，远超阈值。</li></ul><p>这就是固定窗口计数算法的问题，它只能统计当前某1个时间窗的请求数量是否到达阈值，无法结合前后的时间窗的数据做综合统计。</p><p>因此，我们就需要滑动时间窗口算法来解决。</p><h3 id="_4-2-2-滑动窗口计数" tabindex="-1"><a class="header-anchor" href="#_4-2-2-滑动窗口计数"><span>4.2.2.滑动窗口计数</span></a></h3><p>固定时间窗口算法中窗口有很多，其跨度和位置是与时间区间绑定，因此是很多固定不动的窗口。而滑动时间窗口算法中只包含1个固定跨度的窗口，但窗口是可移动动的，与时间区间无关。</p><p>具体规则如下：</p><ul><li>窗口时间跨度<code>Interval</code>大小固定，例如1秒</li><li>时间区间跨度为<code>Interval / n</code> ，例如n=2，则时间区间跨度为500ms</li><li>窗口会随着当前请求所在时间<code>currentTime</code>移动，窗口范围从<code>currentTime-Interval</code>时刻之后的第一个时区开始，到<code>currentTime</code> 所在时区结束。</li></ul><p>如图所示：</p><figure><img src="'+yi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>限流阈值依然为3，绿色小块就是请求，上面的数字是其<code>currentTime</code>值。</p><ul><li>在第1300ms时接收到一个请求，其所在时区就是1000~1500</li><li>按照规则，currentTime-Interval值为300ms，300ms之后的第一个时区是500<sub>1000，因此窗口范围包含两个时区：500</sub>1000、1000~ 1500，也就是粉红色方框部分</li><li>统计窗口内的请求总数，发现是3，未达到上限。</li></ul><p>若第1400ms又来一个请求，会落在1000~1500时区，虽然该时区请求总数是3，但滑动窗口内总数已经达到4，因此该请求会被拒绝：</p><figure><img src="'+_i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假如第1600ms又来的一个请求，处于1500<sub>2000时区，根据算法，滑动窗口位置应该是1000</sub>1500和1500~2000这两个时区，也就是向后移动：</p><figure><img src="'+Bi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这就是滑动窗口计数的原理，解决了我们之前所说的问题。而且滑动窗口内划分的时区越多，这种统计就越准确。</p><h2 id="_4-3-令牌桶算法" tabindex="-1"><a class="header-anchor" href="#_4-3-令牌桶算法"><span>4.3.令牌桶算法</span></a></h2><p>限流的另一种常见算法是令牌桶算法。Sentinel中的热点参数限流正是基于令牌桶算法实现的。其基本思路如图：</p><figure><img src="'+Ai+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li>以固定的速率生成令牌，存入令牌桶中，如果令牌桶满了以后，多余令牌丢弃</li><li>请求进入后，必须先尝试从桶中获取令牌，获取到令牌后才可以被处理</li><li>如果令牌桶中没有令牌，则请求等待或丢弃</li></ul><p>基于令牌桶算法，每秒产生的令牌数量基本就是QPS上限。</p><p>当然也有例外情况，例如：</p><ul><li>某一秒令牌桶中产生了很多令牌，达到令牌桶上限N，缓存在令牌桶中，但是这一秒没有请求进入。</li><li>下一秒的前半秒涌入了超过2N个请求，之前缓存的令牌桶的令牌耗尽，同时这一秒又生成了N个令牌，于是总共放行了2N个请求。超出了我们设定的QPS阈值。</li></ul><p>因此，在使用令牌桶算法时，尽量不要将令牌上限设定到服务能承受的QPS上限。而是预留一定的波动空间，这样我们才能应对突发流量。</p><h2 id="_4-4-漏桶算法" tabindex="-1"><a class="header-anchor" href="#_4-4-漏桶算法"><span>4.4.漏桶算法</span></a></h2><p>漏桶算法与令牌桶相似，但在设计上更适合应对并发波动较大的场景，以解决令牌桶中的问题。</p><p>简单来说就是请求到达后不是直接处理，而是先放入一个队列。而后以固定的速率从队列中取出并处理请求。之所以叫漏桶算法，就是把请求看做水，队列看做是一个漏了的桶。</p><p>如图：</p><figure><img src="'+vi+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li>将每个请求视作&quot;水滴&quot;放入&quot;漏桶&quot;进行存储；</li><li>&quot;漏桶&quot;以固定速率向外&quot;漏&quot;出请求来执行，如果&quot;漏桶&quot;空了则停止&quot;漏水”；</li><li>如果&quot;漏桶&quot;满了则多余的&quot;水滴&quot;会被直接丢弃。</li></ul><p>漏桶的优势就是<strong>流量整型</strong>，桶就像是一个大坝，请求就是水。并发量不断波动，就如图水流时大时小，但都会被大坝拦住。而后大坝按照固定的速度放水，避免下游被洪水淹没。</p><p>因此，不管并发量如何波动，经过漏桶处理后的请求一定是相对平滑的曲线：</p><figure><img src="'+Ci+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>sentinel中的限流中的排队等待功能正是基于漏桶算法实现的。</p><h1 id="_5-作业" tabindex="-1"><a class="header-anchor" href="#_5-作业"><span>5.作业</span></a></h1><p>尝试用自己的语言回答下列面试题：</p><ul><li>SpringCloud有哪些常用组件？分别是什么作用？</li><li>服务注册发现的基本流程是怎样的？</li><li>Eureka和Nacos有哪些区别？</li><li>Nacos的分级存储模型是什么意思？</li><li>OpenFeign是如何实现负载均衡的？</li><li>什么是服务雪崩，常见的解决方案有哪些？</li><li>Hystix和Sentinel有什么区别和联系？</li><li>限流的常见算法有哪些？</li><li>什么是CAP理论和BASE思想？</li><li>项目中碰到过分布式事务问题吗？怎么解决的？</li><li>AT模式如何解决脏读和脏写问题的？</li><li>TCC模式与AT模式对比，有哪些优缺点</li><li>RabbitMQ是如何确保消息的可靠性的？</li><li>RabbitMQ是如何解决消息堆积问题的？</li></ul>',368),Fi=[xi];function Si(zi,Di){return n(),s("div",null,Fi)}const Ri=e(Ei,[["render",Si],["__file","微服务进阶.html.vue"]]),Ti=JSON.parse('{"path":"/demo/back-ends/Java%E8%BF%9B%E9%98%B6/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%9B%E9%98%B6.html","title":"微服务进阶","lang":"en-US","frontmatter":{"title":"微服务进阶","icon":"code","order":4,"category":"微服务","description":"day11-微服务高级 微服务在面试时被问到的内容相对较少，常见的面试题如下： SpringCloud有哪些常用组件？分别是什么作用？ 服务注册发现的基本流程是怎样的？ Eureka和Nacos有哪些区别？ Nacos的分级存储模型是什么意思？ Ribbon和SpringCloudLoadBalancer有什么差异 什么是服务雪崩，常见的解决方案有哪些...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/demo/back-ends/Java%E8%BF%9B%E9%98%B6/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"Utopia"}],["meta",{"property":"og:title","content":"微服务进阶"}],["meta",{"property":"og:description","content":"day11-微服务高级 微服务在面试时被问到的内容相对较少，常见的面试题如下： SpringCloud有哪些常用组件？分别是什么作用？ 服务注册发现的基本流程是怎样的？ Eureka和Nacos有哪些区别？ Nacos的分级存储模型是什么意思？ Ribbon和SpringCloudLoadBalancer有什么差异 什么是服务雪崩，常见的解决方案有哪些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-14T16:31:33.000Z"}],["meta",{"property":"article:author","content":"GXL"}],["meta",{"property":"article:modified_time","content":"2024-09-14T16:31:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-14T16:31:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GXL\\",\\"url\\":\\"https://www.cnblogs.com/feel-myself\\",\\"email\\":\\"gaoxiaoliang123@126.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1.CAP定理","slug":"_1-1-cap定理","link":"#_1-1-cap定理","children":[{"level":3,"title":"1.1.1.一致性","slug":"_1-1-1-一致性","link":"#_1-1-1-一致性","children":[]},{"level":3,"title":"1.1.2.可用性","slug":"_1-1-2-可用性","link":"#_1-1-2-可用性","children":[]},{"level":3,"title":"1.1.3.分区容错","slug":"_1-1-3-分区容错","link":"#_1-1-3-分区容错","children":[]},{"level":3,"title":"1.1.4.矛盾","slug":"_1-1-4-矛盾","link":"#_1-1-4-矛盾","children":[]}]},{"level":2,"title":"1.2.BASE理论","slug":"_1-2-base理论","link":"#_1-2-base理论","children":[]},{"level":2,"title":"1.3.AT模式的脏写问题","slug":"_1-3-at模式的脏写问题","link":"#_1-3-at模式的脏写问题","children":[]},{"level":2,"title":"1.4.TCC模式","slug":"_1-4-tcc模式","link":"#_1-4-tcc模式","children":[{"level":3,"title":"1.4.1.流程分析","slug":"_1-4-1-流程分析","link":"#_1-4-1-流程分析","children":[]},{"level":3,"title":"1.4.2.事务悬挂和空回滚","slug":"_1-4-2-事务悬挂和空回滚","link":"#_1-4-2-事务悬挂和空回滚","children":[]},{"level":3,"title":"1.4.3.总结","slug":"_1-4-3-总结","link":"#_1-4-3-总结","children":[]}]},{"level":2,"title":"2.1.环境隔离","slug":"_2-1-环境隔离","link":"#_2-1-环境隔离","children":[{"level":3,"title":"2.1.1.创建namespace","slug":"_2-1-1-创建namespace","link":"#_2-1-1-创建namespace","children":[]},{"level":3,"title":"2.1.2.微服务配置namespace","slug":"_2-1-2-微服务配置namespace","link":"#_2-1-2-微服务配置namespace","children":[]}]},{"level":2,"title":"2.2.分级模型","slug":"_2-2-分级模型","link":"#_2-2-分级模型","children":[]},{"level":2,"title":"2.3.Eureka","slug":"_2-3-eureka","link":"#_2-3-eureka","children":[]},{"level":2,"title":"2.4.Eureka和Nacos对比","slug":"_2-4-eureka和nacos对比","link":"#_2-4-eureka和nacos对比","children":[]},{"level":2,"title":"3.1.负载均衡原理","slug":"_3-1-负载均衡原理","link":"#_3-1-负载均衡原理","children":[{"level":3,"title":"3.1.1.源码跟踪","slug":"_3-1-1-源码跟踪","link":"#_3-1-1-源码跟踪","children":[]},{"level":3,"title":"3.1.2.流程梳理","slug":"_3-1-2-流程梳理","link":"#_3-1-2-流程梳理","children":[]}]},{"level":2,"title":"3.2.NacosRule","slug":"_3-2-nacosrule","link":"#_3-2-nacosrule","children":[{"level":3,"title":"3.2.1.修改负载均衡策略","slug":"_3-2-1-修改负载均衡策略","link":"#_3-2-1-修改负载均衡策略","children":[]},{"level":3,"title":"3.2.2.集群优先","slug":"_3-2-2-集群优先","link":"#_3-2-2-集群优先","children":[]},{"level":3,"title":"3.2.3.权重配置","slug":"_3-2-3-权重配置","link":"#_3-2-3-权重配置","children":[]}]},{"level":2,"title":"4.1.线程隔离","slug":"_4-1-线程隔离","link":"#_4-1-线程隔离","children":[]},{"level":2,"title":"4.2.滑动窗口算法","slug":"_4-2-滑动窗口算法","link":"#_4-2-滑动窗口算法","children":[{"level":3,"title":"4.2.1.固定窗口计数","slug":"_4-2-1-固定窗口计数","link":"#_4-2-1-固定窗口计数","children":[]},{"level":3,"title":"4.2.2.滑动窗口计数","slug":"_4-2-2-滑动窗口计数","link":"#_4-2-2-滑动窗口计数","children":[]}]},{"level":2,"title":"4.3.令牌桶算法","slug":"_4-3-令牌桶算法","link":"#_4-3-令牌桶算法","children":[]},{"level":2,"title":"4.4.漏桶算法","slug":"_4-4-漏桶算法","link":"#_4-4-漏桶算法","children":[]}],"git":{"createdTime":1726331493000,"updatedTime":1726331493000,"contributors":[{"name":"udo-bit","email":"enote_gxl@163.com","commits":1}]},"readingTime":{"minutes":31.18,"words":9353},"filePathRelative":"demo/back-ends/Java进阶/微服务/微服务进阶.md","localizedDate":"September 14, 2024","excerpt":"\\n<p>微服务在面试时被问到的内容相对较少，常见的面试题如下：</p>\\n<ul>\\n<li>SpringCloud有哪些常用组件？分别是什么作用？</li>\\n<li>服务注册发现的基本流程是怎样的？</li>\\n<li>Eureka和Nacos有哪些区别？</li>\\n<li>Nacos的分级存储模型是什么意思？</li>\\n<li>Ribbon和SpringCloudLoadBalancer有什么差异</li>\\n<li>什么是服务雪崩，常见的解决方案有哪些？</li>\\n<li>Hystix和Sentinel有什么区别和联系？</li>\\n<li>限流的常见算法有哪些？</li>\\n<li>什么是CAP理论和BASE思想？</li>\\n<li>项目中碰到过分布式事务问题吗？怎么解决的？</li>\\n<li>AT模式如何解决脏读和脏写问题的？</li>\\n<li>TCC模式与AT模式对比，有哪些优缺点</li>\\n</ul>","autoDesc":true}');export{Ri as comp,Ti as data};
